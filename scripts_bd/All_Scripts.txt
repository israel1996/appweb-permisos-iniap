/**********************************************************************************************
 ***                                                                                        ***
 ***                                      BASE DE DATOS                                     ***
 ***                                                                                        ***
 *********************************************************************************************/


DROP DATABASE IF EXISTS iniap;
CREATE DATABASE iniap;
USE iniap;


CREATE TABLE `tb_user` (
  `id_user` int PRIMARY KEY AUTO_INCREMENT,
  `id_userType` int,
  `id_employee` int,
  `name_user` varchar(100) UNIQUE,
  `password_user` varchar(200),
  `state_user` bool,
  `createdDate_user` datetime,
  `lastSession_user` datetime
);

CREATE TABLE `tb_employee` (
  `id_employee` int PRIMARY KEY AUTO_INCREMENT,
  `id_codeType` int,
  `id_typeContract` int,
  `id_departament` int,
  `id_jobTitle` int,
  `ci_employee` varchar(13),
  `name_employee` varchar(100),
  `lastName_employee` varchar(150),
  `startDate_employee` date,
  `phoneNumber_employee` varchar(13),
  `address_employee` text,
  `email_employee` varchar(100),
  `salary_employee` decimal(10,2)
);

CREATE TABLE `tb_departament` (
  `id_departament` int PRIMARY KEY AUTO_INCREMENT,
  `name_departament` text
);

CREATE TABLE `tb_userType` (
  `id_userType` int PRIMARY KEY AUTO_INCREMENT,
  `name_userType` text
);

CREATE TABLE `tb_permission` (
  `id_permission` int PRIMARY KEY AUTO_INCREMENT,
  `id_employee` int,
  `id_reason` int,
  `id_numberPeriod` int,
  `issueNumber_permission` int,
  `issueDate_permission` date,
  `state_permission` char(1),
  `startDateTime_permission` datetime,
  `endDateTime_permission` datetime,
  `workingDays_permission` decimal(10,2),
  `weekendDays_permission` decimal(10,2),
  `carry_permission` decimal(10,2),
  `observation_permission` text,
  `adminObservation_permission` text
);

CREATE TABLE `tb_permissionBack` (
  `id_permissionBack` int PRIMARY KEY AUTO_INCREMENT,
  `id_employee` int,
  `issueDate_permissionBack` datetime,
  `minDate_permissionBack` date,
  `state_permissionBack` bool
);


CREATE TABLE `tb_typeContract` (
  `id_typeContract` int PRIMARY KEY AUTO_INCREMENT,
  `name_typeContract` text
);

CREATE TABLE `tb_reason` (
  `id_reason` int PRIMARY KEY AUTO_INCREMENT,
  `name_reason` text
);

CREATE TABLE `tb_codeType` (
  `id_codeType` int PRIMARY KEY AUTO_INCREMENT,
  `name_codeType` text
);

CREATE TABLE `tb_jobTitle` (
  `id_jobTitle` int PRIMARY KEY AUTO_INCREMENT,
  `name_jobTitle` text
);

CREATE TABLE `tb_paymentRole` (
  `id_paymentRole` int PRIMARY KEY AUTO_INCREMENT,
  `id_employee` int,
  `issueDate_paymentRole` date,
  `year_paymentRole` char(4)
);

CREATE TABLE `tb_paymentRole_detail` (
  `id_paymentRole_detail` int PRIMARY KEY AUTO_INCREMENT,
  `id_paymentRole` int,
  `rmu_nominal` decimal(10,2),
  `rmu` decimal(10,2),
  `sueldo_encargo` decimal(10,2),
  `mes_decimos` decimal(10,2),
  `total_ingresos` decimal(10,2),
  `aporte_iess` decimal(10,2),
  `prestamo_quirografario` decimal(10,2),
  `prestamo_hipotecario` decimal(10,2),
  `impuesto_renta_mes` decimal(10,2),
  `anticipo` decimal(10,2),
  `viaticos_inj` decimal(10,2),
  `aso_empleados` decimal(10,2),
  `juzg_ninez` decimal(10,2),
  `cob_salud` decimal(10,2),
  `sindicato` decimal(10,2),
  `sancion_pecuniaria` decimal(10,2),
  `sub_enfermedad` decimal(10,2),
  `ley_con_sol` decimal(10,2),
  `uniformes` decimal(10,2),
  `total_egresos` decimal(10,2),
  `total_recibir` decimal(10,2)
);

CREATE TABLE `tb_vacationPeriod` (
  `id_vacationPeriod` int PRIMARY KEY AUTO_INCREMENT,
  `id_employee` int,
  `startDate_vacationPeriod` date,
  `endDate_vacationPeriod` date,
  `earnedDays_vacationPeriod` decimal(10,2),
  `balanceDays_vacationPeriod` decimal(10,2),
  `balanceWorkingDays_vacationPeriod` decimal(10,2),
  `balanceWeekendDays_vacationPeriod` decimal(10,2),
  `state_vacationPeriod` bool
);

CREATE TABLE `tb_audit` (
  `id_audit` int PRIMARY KEY AUTO_INCREMENT,
  `id_user` int,
  `dateTime_audit` datetime,
  `table_audit` text,
  `action_audit` text,
  `newData_audit` text
);

CREATE TABLE `tb_numberPeriod` (
  `id_numberPeriod` int PRIMARY KEY AUTO_INCREMENT,
  `year_numberPeriod` YEAR,
  `count_numberPeriod` int,
  `countCertificate_numberPeriod` int,
  `state_numberPeriod` bool
);

ALTER TABLE `tb_user` ADD FOREIGN KEY (`id_userType`) REFERENCES `tb_userType` (`id_userType`);

ALTER TABLE `tb_user` ADD FOREIGN KEY (`id_employee`) REFERENCES `tb_employee` (`id_employee`);

ALTER TABLE `tb_employee` ADD FOREIGN KEY (`id_codeType`) REFERENCES `tb_codeType` (`id_codeType`);

ALTER TABLE `tb_employee` ADD FOREIGN KEY (`id_typeContract`) REFERENCES `tb_typeContract` (`id_typeContract`);

ALTER TABLE `tb_employee` ADD FOREIGN KEY (`id_departament`) REFERENCES `tb_departament` (`id_departament`);

ALTER TABLE `tb_employee` ADD FOREIGN KEY (`id_jobTitle`) REFERENCES `tb_jobTitle` (`id_jobTitle`);

ALTER TABLE `tb_permission` ADD FOREIGN KEY (`id_employee`) REFERENCES `tb_employee` (`id_employee`);

ALTER TABLE `tb_permission` ADD FOREIGN KEY (`id_reason`) REFERENCES `tb_reason` (`id_reason`);

ALTER TABLE `tb_permission` ADD FOREIGN KEY (`id_numberPeriod`) REFERENCES `tb_numberPeriod` (`id_numberPeriod`);

ALTER TABLE `tb_permissionBack` ADD FOREIGN KEY (`id_employee`) REFERENCES `tb_employee` (`id_employee`);

ALTER TABLE `tb_paymentRole` ADD FOREIGN KEY (`id_employee`) REFERENCES `tb_employee` (`id_employee`);

ALTER TABLE `tb_paymentRole_detail` ADD FOREIGN KEY (`id_paymentRole`) REFERENCES `tb_paymentRole` (`id_paymentRole`);

ALTER TABLE `tb_vacationPeriod` ADD FOREIGN KEY (`id_employee`) REFERENCES `tb_employee` (`id_employee`);

ALTER TABLE `tb_audit` ADD FOREIGN KEY (`id_user`) REFERENCES `tb_user` (`id_user`);



/**********************************************************************************************
 ***                                                                                        ***
 ***                              PROCEDIMIENTOS ALMACENADOS                                ***
 ***                                                                                        ***
 *********************************************************************************************/


DELIMITER $$
CREATE PROCEDURE pa_insertEmployee(
    IN p_id_codeType INT,
    IN p_id_typeContract INT,
    IN p_id_departament INT,
    IN p_id_jobTitle INT,
    IN p_ci_employee VARCHAR(13),
    IN p_name_employee VARCHAR(100),
    IN p_lastName_employee VARCHAR(150),
    IN p_startDate_employee DATE,
    IN p_phoneNumber_employee VARCHAR(13),
    IN p_address_employee TEXT,
    IN p_email_employee VARCHAR(100),
    IN p_salary_employee DECIMAL(10,2),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE ciExists INT DEFAULT 0;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    -- Verificar si el número de cédula ya existe
    SELECT COUNT(*) INTO ciExists FROM tb_employee WHERE ci_employee = p_ci_employee;

    IF ciExists > 0 THEN
        SET p_success = FALSE;
        SET p_message = 'Ya existe un empleado con ese número de cédula';
    ELSE
        START TRANSACTION;
        -- Inserción en la tabla tb_employee
        INSERT INTO tb_employee (id_codeType, id_typeContract, id_departament, id_jobTitle, ci_employee, name_employee, lastName_employee, startDate_employee, phoneNumber_employee, address_employee, email_employee, salary_employee)
        VALUES (p_id_codeType, p_id_typeContract, p_id_departament, p_id_jobTitle, p_ci_employee, p_name_employee, p_lastName_employee, p_startDate_employee, p_phoneNumber_employee, p_address_employee, p_email_employee, p_salary_employee);

        COMMIT;

        SET p_success = TRUE;
        SET p_message = 'Inserción exitosa';
    END IF;
END $$
DELIMITER ;



DELIMITER $$
CREATE PROCEDURE pa_insertUser(
    IN p_id_employee INT,
    IN p_id_userType INT,
    IN p_password_user VARCHAR(200),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE username VARCHAR(255);
    DECLARE counter INT DEFAULT 0;
    DECLARE usernameExists INT DEFAULT 0;
    DECLARE p_name_employee_n VARCHAR(255);
    DECLARE p_lastName_employee_n VARCHAR(255);
    DECLARE p_name_employee VARCHAR(255);
    DECLARE p_lastName_employee VARCHAR(255);
    DECLARE ciExists INT DEFAULT 0;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;
START TRANSACTION;

		SELECT name_employee, lastName_employee INTO p_name_employee, p_lastName_employee
		FROM tb_employee WHERE id_employee = p_id_employee;

        -- Obtener el primer nombre y el primer apellido
        SET p_name_employee = TRIM(p_name_employee);
        SET p_lastName_employee = TRIM(p_lastName_employee);
        SET p_name_employee_n = SUBSTRING_INDEX(p_name_employee, ' ', 1);
        SET p_lastName_employee_n = SUBSTRING_INDEX(p_lastName_employee, ' ', 1);

        -- Generar el nombre de usuario
        SET username = CONCAT(LOWER(p_name_employee_n), '.', LOWER(p_lastName_employee_n));

        -- Verificar si el nombre de usuario ya existe
        SELECT COUNT(*) INTO usernameExists FROM tb_user WHERE name_user = username;
    
        -- Si el nombre de usuario ya existe, agregar un número al final
        WHILE usernameExists > 0 DO
            SET counter = counter + 1;
            SET username = CONCAT(LOWER(p_name_employee_n), '.', LOWER(p_lastName_employee_n), counter);
            SELECT COUNT(*) INTO usernameExists FROM tb_user WHERE name_user = username;
        END WHILE;

        -- Inserción en la tabla tb_user
        INSERT INTO tb_user (id_userType, id_employee, name_user, password_user, state_user,  createdDate_user, lastSession_user)
        VALUES (p_id_userType, p_id_employee, username, p_password_user, TRUE, NOW(), NOW());

        COMMIT;

        SET p_success = TRUE;
        SET p_message = 'Inserción exitosa';
END $$
DELIMITER ;




DELIMITER $$
CREATE PROCEDURE pa_updateEmployee(
    IN p_employeeId INT,
    IN p_id_codeType INT,
    IN p_id_typeContract INT,
    IN p_id_departament INT,
    IN p_id_jobTitle INT,
    IN p_ci_employee VARCHAR(13),
    IN p_name_employee VARCHAR(100),
    IN p_lastName_employee VARCHAR(150),
    IN p_startDate_employee DATE,
    IN p_phoneNumber_employee VARCHAR(13),
    IN p_address_employee TEXT,
    IN p_email_employee VARCHAR(100),
    IN p_salary_employee DECIMAL(10,2),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE cedulaExists INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;

    -- Verificar si el número de cédula ya existe en otro empleado
    SELECT COUNT(*) INTO cedulaExists FROM tb_employee WHERE ci_employee = p_ci_employee AND id_employee <> p_employeeId;
    
    IF cedulaExists > 0 THEN
        SET p_success = FALSE;
        SET p_message = 'El número de cédula ya existe en otro empleado';
        ROLLBACK;
    ELSE
        -- Actualización en la tabla tb_employee
        UPDATE tb_employee
        SET
            id_codeType = p_id_codeType,
            id_typeContract = p_id_typeContract,
            id_departament = p_id_departament,
            id_jobTitle = p_id_jobTitle,
            ci_employee = p_ci_employee,
            name_employee = p_name_employee,
            lastName_employee = p_lastName_employee,
            startDate_employee = p_startDate_employee,
            phoneNumber_employee = p_phoneNumber_employee,
            address_employee = p_address_employee,
            email_employee = p_email_employee,
            salary_employee = p_salary_employee
        WHERE id_employee = p_employeeId;

        COMMIT;

        SET p_success = TRUE;
        SET p_message = 'Actualización exitosa';
    END IF;
END $$

DELIMITER ;




DELIMITER $$
CREATE PROCEDURE pa_updateEmployeeUser(
    IN p_employeeId INT,
    IN p_id_codeType INT,
    IN p_id_typeContract INT,
    IN p_id_departament INT,
    IN p_ci_employee VARCHAR(13),
    IN p_name_employee VARCHAR(100),
    IN p_lastName_employee VARCHAR(150),
    IN p_startDate_employee DATE,
    IN p_phoneNumber_employee VARCHAR(13),
    IN p_address_employee TEXT,
    IN p_email_employee VARCHAR(100),
    IN p_id_userType INT,
    IN p_password_user VARCHAR(200),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE username VARCHAR(255);
    DECLARE counter INT DEFAULT 0;
    DECLARE usernameExists INT DEFAULT 0;
    DECLARE p_name_employee_n VARCHAR(255);
    DECLARE p_lastName_employee_n VARCHAR(255);
    DECLARE p_current_name_employee VARCHAR(100);
    DECLARE p_current_lastName_employee VARCHAR(150);
    DECLARE cedulaExists INT DEFAULT 0;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;

    -- Obtener el primer nombre y el primer apellido
    SET p_name_employee = TRIM(p_name_employee);
    SET p_lastName_employee = TRIM(p_lastName_employee);
    SET p_name_employee_n = SUBSTRING_INDEX(p_name_employee, ' ', 1);
    SET p_lastName_employee_n = SUBSTRING_INDEX(p_lastName_employee, ' ', 1);

    -- Verificar si el nombre y apellido recibidos son diferentes a los registrados en la base de datos
    SELECT name_employee, lastName_employee INTO p_current_name_employee, p_current_lastName_employee
    FROM tb_employee
    WHERE id_employee = p_employeeId;

    IF p_current_name_employee <> p_name_employee OR p_current_lastName_employee <> p_lastName_employee THEN
        -- Generar el nombre de usuario solo si hay cambios en el nombre o apellido
        SET username = CONCAT(LOWER(p_name_employee_n), '.', LOWER(p_lastName_employee_n));

        -- Verificar si el nombre de usuario ya existe
        SELECT COUNT(*) INTO usernameExists FROM tb_user WHERE name_user = username AND id_employee = p_employeeId;
        
        IF usernameExists = 0 THEN
            -- Si el nombre de usuario ya existe, agregar un número al final
            WHILE usernameExists > 0 DO
                SET counter = counter + 1;
                SET username = CONCAT(LOWER(p_name_employee_n), '.', LOWER(p_lastName_employee_n), counter);
                SELECT COUNT(*) INTO usernameExists FROM tb_user WHERE name_user = username;
            END WHILE;
        END IF;
    ELSE
        -- Mantener el nombre de usuario existente sin cambios
        SELECT name_user INTO username FROM tb_user WHERE id_employee = p_employeeId;
    END IF;
    
    -- Verificar si el número de cédula ya existe en otro empleado
    SELECT COUNT(*) INTO cedulaExists FROM tb_employee WHERE ci_employee = p_ci_employee AND id_employee <> p_employeeId;
    
    IF cedulaExists > 0 THEN
        SET p_success = FALSE;
        SET p_message = 'El número de cédula ya existe en otro empleado';
        ROLLBACK;
    ELSE
        -- Actualización en la tabla tb_employee
        UPDATE tb_employee
        SET
            id_codeType = p_id_codeType,
            id_typeContract = p_id_typeContract,
            id_departament = p_id_departament,
            ci_employee = p_ci_employee,
            name_employee = p_name_employee,
            lastName_employee = p_lastName_employee,
            startDate_employee = p_startDate_employee,
            phoneNumber_employee = p_phoneNumber_employee,
            address_employee = p_address_employee,
            email_employee = p_email_employee
        WHERE id_employee = p_employeeId;

        -- Actualización en la tabla tb_user
        UPDATE tb_user
        SET
            id_userType = p_id_userType,
            name_user = username,
            password_user = p_password_user
        WHERE id_employee = p_employeeId;

        COMMIT;

        SET p_success = TRUE;
        SET p_message = 'Actualización exitosa';
    END IF;
END $$

DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_disableEmployee(
    IN p_employee_id INT,
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE v_user_id INT;
    DECLARE v_exists INT;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;
    
    -- Verificar si hay registros de vacationPeriod para el id_employee
    SELECT COUNT(*) INTO v_exists FROM tb_vacationPeriod WHERE id_employee = p_employee_id;

    IF v_exists > 0 THEN
        -- Deshabilitar usuario
        UPDATE tb_vacationPeriod
        SET 
            earnedDays_vacationPeriod = 0,
            balanceDays_vacationPeriod = 0,
            balanceWorkingDays_vacationPeriod = 0,
            balanceWeekendDays_vacationPeriod = 0,
            state_vacationPeriod = 0
        WHERE id_employee = p_employee_id;
        
        -- Verificar si se actualizó algún registro
        IF ROW_COUNT() = 0 THEN
            SET p_success = FALSE;
            SET p_message = 'No se pudo deshabilitar el empleado';
            ROLLBACK;
        ELSE
            COMMIT;
            SET p_success = TRUE;
            SET p_message = 'Empleado deshabilitado exitosamente';
        END IF;
    ELSE
        SET p_success = FALSE;
        SET p_message = 'No se encontraron registros de periodos de vacaciones para este empleado';
        ROLLBACK;
    END IF;
    
END $$
DELIMITER ;




DELIMITER $$
CREATE PROCEDURE pa_updateUser(
    IN p_id_user INT,
    IN p_id_userType INT,
    IN p_password_user VARCHAR(200),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;
START TRANSACTION;
        -- Update a la tabla
        UPDATE tb_user 
		  SET id_userType = p_id_userType, 
		  password_user = p_password_user
        WHERE id_user = p_id_user;

        COMMIT;

        SET p_success = TRUE;
        SET p_message = 'Actualización exitosa';
END $$
DELIMITER ;



DELIMITER $$
CREATE PROCEDURE pa_disableUser(
    IN p_user_id INT,
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE v_user_id INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;
    
    -- Deshabilitar usuario
    UPDATE tb_user
    SET state_user = FALSE
    WHERE id_user = p_user_id;
    
    COMMIT;
    
    SET p_success = TRUE;
    SET p_message = 'Usuario deshabilitado exitosamente';
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_enableUser(
    IN p_user_id INT,
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE v_user_id INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;
    
    -- Habilitar usuario
    UPDATE tb_user
    SET state_user = TRUE
    WHERE id_user = p_user_id;
    
    COMMIT;
    
    SET p_success = TRUE;
    SET p_message = 'Usuario habilitado exitosamente';
END $$

DELIMITER ;



DELIMITER $$
CREATE PROCEDURE pa_validateUser(
    IN p_username VARCHAR(100),
    OUT p_success BOOLEAN,
    OUT p_message TEXT,
    OUT p_employee_id INT,
    OUT p_user_id INT,
    OUT p_password_user VARCHAR(200)
)
BEGIN
    DECLARE v_state_user BOOLEAN;
    
    -- Verificar si el usuario existe en la base de datos
    SELECT id_employee, id_user, state_user, password_user INTO p_employee_id, p_user_id, v_state_user, p_password_user
    FROM tb_user
    WHERE name_user = p_username;

    IF p_user_id IS NOT NULL THEN
        IF v_state_user THEN
            SET p_success = TRUE;
            SET p_message = 'El usuario existe en la base de datos y tiene acceso.';
        ELSE
            SET p_success = FALSE;
            SET p_message = 'El usuario existe en la base de datos pero no tiene acceso.';
        END IF;
    ELSE
        SET p_success = FALSE;
        SET p_message = 'El usuario no existe en la base de datos.';
    END IF;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_getPasswordUser(
    IN p_id_user INT,
    OUT p_password_user VARCHAR(200),
    OUT p_success BOOLEAN
)
BEGIN
    DECLARE v_user_count INT;

    -- Verificar si el usuario existe en la base de datos
    SELECT COUNT(*) INTO v_user_count
    FROM tb_user
    WHERE id_user = p_id_user;

    IF v_user_count > 0 THEN
        -- Obtener la contraseña del usuario
        SELECT password_user INTO p_password_user
        FROM tb_user
        WHERE id_user = p_id_user;

        SET p_success = TRUE;
    ELSE
        SET p_success = FALSE;
    END IF;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_updatePasswordUser(
    IN p_id_user INT,
    IN p_new_password VARCHAR(200),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE v_user_count INT;

    -- Iniciar la transacción
    START TRANSACTION;

    -- Verificar si el usuario existe en la base de datos
    SELECT COUNT(*) INTO v_user_count
    FROM tb_user
    WHERE id_user = p_id_user;

    IF v_user_count > 0 THEN
        -- Actualizar la contraseña del usuario dentro de la transacción
        BEGIN
            UPDATE tb_user
            SET password_user = p_new_password
            WHERE id_user = p_id_user;

            -- Marcar la transacción como exitosa
            SET p_success = TRUE;
            SET p_message = 'La contraseña del usuario ha sido actualizada correctamente.';
        END;
    ELSE
        -- Marcar la transacción como fallida
        SET p_success = FALSE;
        SET p_message = 'No se encontró un usuario con el ID especificado.';
    END IF;

    -- Confirmar o revertir la transacción
    IF p_success THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;
END $$
DELIMITER ;



DELIMITER $$
CREATE PROCEDURE pa_updateLastSession(
    IN p_id_user INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;

    UPDATE tb_user
    SET lastSession_user = CURRENT_TIMESTAMP
    WHERE id_user = p_id_user;

    IF ROW_COUNT() > 0 THEN
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;

END $$

DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_getEmployeeDataByID(
    IN p_employee_id INT
)
BEGIN
    -- Obtener los datos del empleado basado en el ID de empleado
    SELECT *
    FROM tb_employee
    WHERE id_employee = p_employee_id;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE pa_getUserDataByID(
    IN p_user_id INT
)
BEGIN
    -- Obtener los datos del usuario basado en el ID de empleado
    SELECT *
    FROM tb_user
    WHERE id_user = p_user_id;
END $$
DELIMITER ;




DELIMITER $$
CREATE PROCEDURE pa_resetPasswordUser(
    IN p_user_id INT,
    IN p_new_password VARCHAR(200),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(MESSAGE, 100), ' at ', -1), ':', 1));
    END;
    
    START TRANSACTION;
    
    -- Verificar si el usuario existe
    IF p_user_id IS NOT NULL THEN
        -- Actualizar la contraseña del usuario
        UPDATE tb_user
        SET password_user = p_new_password
        WHERE id_user = p_user_id;
        
        COMMIT;
        
        SET p_success = TRUE;
        SET p_message = 'Contraseña restablecida exitosamente.';
    ELSE
        SET p_success = FALSE;
        SET p_message = 'No se encontró un usuario.';
    END IF;
END $$

DELIMITER ;



-- -----------------------------------------------------------------------------------------------------

DELIMITER $$
CREATE PROCEDURE pa_manageDepartament(
    IN p_id_departament INT,
    IN p_name_departament TEXT,
    IN p_operation VARCHAR(10),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE num_occurrences_dept INT;
    DECLARE num_occurrences_emp INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;

    IF p_operation = 'INSERT' THEN
        IF p_name_departament IS NULL OR p_name_departament = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del departamento para la operación de inserción';
        ELSE
            INSERT INTO tb_departament (name_departament)
            VALUES (p_name_departament);

            SET p_success = TRUE;
            SET p_message = 'Inserción exitosa';
        END IF;

    ELSEIF p_operation = 'UPDATE' THEN
        IF p_id_departament IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del departamento para la operación de actualización';
        ELSEIF p_name_departament IS NULL OR p_name_departament = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del departamento para la operación de actualización';
        ELSE
            UPDATE tb_departament
            SET name_departament = p_name_departament
            WHERE id_departament = p_id_departament;

            SET p_success = TRUE;
            SET p_message = 'Actualización exitosa';
        END IF;

    ELSEIF p_operation = 'DELETE' THEN
        IF p_id_departament IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del departamento para la operación de eliminación';
        ELSE
            -- Validar si el ID está presente en la tabla tb_departament
            SET num_occurrences_dept = (SELECT COUNT(*) FROM tb_departament WHERE id_departament = p_id_departament);
            
            IF num_occurrences_dept = 0 THEN
                SET p_success = FALSE;
                SET p_message = 'El departamento con el ID proporcionado no existe en la tabla tb_departament';
            ELSE
                -- Validar si el ID está presente en la tabla tb_employee
                SET num_occurrences_emp = (SELECT COUNT(*) FROM tb_employee WHERE id_departament = p_id_departament);
                
                IF num_occurrences_emp > 0 THEN
                    SET p_success = FALSE;
                    SET p_message = 'No se puede eliminar el departamento porque está siendo utilizado en la tabla tb_employee';
                ELSE
                    DELETE FROM tb_departament
                    WHERE id_departament = p_id_departament;

                    SET p_success = TRUE;
                    SET p_message = 'Eliminación exitosa';
                END IF;
            END IF;
        END IF;

    ELSE
        SET p_success = FALSE;
        SET p_message = 'Operación no válida';

    END IF;

    COMMIT;
    
END $$
DELIMITER ;


-- -----------------------------------------------------------------------------------------

DELIMITER $$
CREATE PROCEDURE pa_manageTypeContract(
    IN p_id_typeContract INT,
    IN p_name_typeContract TEXT,
    IN p_operation ENUM('INSERT', 'UPDATE', 'DELETE'),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE num_occurrences_contract INT;
    DECLARE num_occurrences_emp INT;
    
    -- Manejo de excepciones
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, @errmsg = MESSAGE_TEXT;
        SET p_message = CONCAT('Error en la transacción: ', @errmsg);
    END;

    START TRANSACTION;

    IF p_operation = 'INSERT' THEN
        IF p_name_typeContract IS NULL OR p_name_typeContract = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del tipo de contrato para la operación de inserción';
            ROLLBACK;
        ELSE
            INSERT INTO tb_typeContract (name_typeContract)
            VALUES (p_name_typeContract);

            SET p_success = TRUE;
            SET p_message = 'Inserción exitosa';
            COMMIT;
        END IF;

    ELSEIF p_operation = 'UPDATE' THEN
        IF p_id_typeContract IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del tipo de contrato para la operación de actualización';
            ROLLBACK;
        ELSEIF p_name_typeContract IS NULL OR p_name_typeContract = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del tipo de contrato para la operación de actualización';
            ROLLBACK;
        ELSE
            UPDATE tb_typeContract
            SET name_typeContract = p_name_typeContract
            WHERE id_typeContract = p_id_typeContract;

            SET p_success = TRUE;
            SET p_message = 'Actualización exitosa';
            COMMIT;
        END IF;

    ELSEIF p_operation = 'DELETE' THEN
        IF p_id_typeContract IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del tipo de contrato para la operación de eliminación';
            ROLLBACK;
        ELSE
            SET num_occurrences_contract = (SELECT COUNT(*) FROM tb_typeContract WHERE id_typeContract = p_id_typeContract);
            
            IF num_occurrences_contract = 0 THEN
                SET p_success = FALSE;
                SET p_message = 'El tipo de contrato con el ID proporcionado no existe en la tabla tb_typeContract';
                ROLLBACK;
            ELSE
                SET num_occurrences_emp = (SELECT COUNT(*) FROM tb_employee WHERE id_typeContract = p_id_typeContract);
                
                IF num_occurrences_emp > 0 THEN
                    SET p_success = FALSE;
                    SET p_message = 'No se puede eliminar el tipo de contrato porque está siendo utilizado en la tabla tb_employee';
                    ROLLBACK;
                ELSE
                    DELETE FROM tb_typeContract
                    WHERE id_typeContract = p_id_typeContract;

                    SET p_success = TRUE;
                    SET p_message = 'Eliminación exitosa';
                    COMMIT;
                END IF;
            END IF;
        END IF;

    ELSE
        SET p_success = FALSE;
        SET p_message = 'Operación no válida';
        ROLLBACK;

    END IF;

END $$

DELIMITER ;


-- -------------------------------------------------------------------------------------------------------------------------

DELIMITER $$
CREATE PROCEDURE pa_manageReason(
    IN p_id_reason INT,
    IN p_name_reason TEXT,
    IN p_operation VARCHAR(10),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE num_occurrences_reason INT;
    DECLARE num_occurrences_perm INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;

    IF p_operation = 'INSERT' THEN
        IF p_name_reason IS NULL OR p_name_reason = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre de la razón para la operación de inserción';
        ELSE
            INSERT INTO tb_reason (name_reason)
            VALUES (p_name_reason);

            SET p_success = TRUE;
            SET p_message = 'Inserción exitosa';
        END IF;

    ELSEIF p_operation = 'UPDATE' THEN
        IF p_id_reason IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID de la razón para la operación de actualización';
        ELSEIF p_name_reason IS NULL OR p_name_reason = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre de la razón para la operación de actualización';
        ELSE
            UPDATE tb_reason
            SET name_reason = p_name_reason
            WHERE id_reason = p_id_reason;

            SET p_success = TRUE;
            SET p_message = 'Actualización exitosa';
        END IF;

    ELSEIF p_operation = 'DELETE' THEN
        IF p_id_reason IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID de la razón para la operación de eliminación';
        ELSE
            -- Validar si el ID está presente en la tabla tb_reason
            SET num_occurrences_reason = (SELECT COUNT(*) FROM tb_reason WHERE id_reason = p_id_reason);
            
            IF num_occurrences_reason = 0 THEN
                SET p_success = FALSE;
                SET p_message = 'La razón con el ID proporcionado no existe en la tabla tb_reason';
            ELSE
                -- Validar si el ID está presente en la tabla tb_permission
                SET num_occurrences_perm = (SELECT COUNT(*) FROM tb_permission WHERE id_reason = p_id_reason);
                
                IF num_occurrences_perm > 0 THEN
                    SET p_success = FALSE;
                    SET p_message = 'No se puede eliminar la razón porque está siendo utilizada en la tabla tb_permission';
                ELSE
                    DELETE FROM tb_reason
                    WHERE id_reason = p_id_reason;

                    SET p_success = TRUE;
                    SET p_message = 'Eliminación exitosa';
                END IF;
            END IF;
        END IF;

    ELSE
        SET p_success = FALSE;
        SET p_message = 'Operación no válida';

    END IF;

    COMMIT;

END $$

DELIMITER ;


-- ----------------------------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE pa_manageJobTitle(
    IN p_id_jobTitle INT,
    IN p_name_jobTitle TEXT,
    IN p_operation VARCHAR(10),
    OUT p_success BOOLEAN,
    OUT p_message TEXT
)
BEGIN
    DECLARE num_occurrences_job INT;
    DECLARE num_occurrences_emp INT;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        SET p_success = FALSE;
        SET p_message = CONCAT('Error en la transacción: ', SUBSTRING_INDEX(SUBSTRING_INDEX(LEFT(NEW.MESSAGE, 100), ' at ', -1), ':', 1));
    END;

    START TRANSACTION;

    IF p_operation = 'INSERT' THEN
        IF p_name_jobTitle IS NULL OR p_name_jobTitle = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del título del trabajo para la operación de inserción';
        ELSE
            INSERT INTO tb_jobTitle (name_jobTitle)
            VALUES (p_name_jobTitle);

            SET p_success = TRUE;
            SET p_message = 'Inserción exitosa';
        END IF;

    ELSEIF p_operation = 'UPDATE' THEN
        IF p_id_jobTitle IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del título del trabajo para la operación de actualización';
        ELSEIF p_name_jobTitle IS NULL OR p_name_jobTitle = '' THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el nombre del título del trabajo para la operación de actualización';
        ELSE
            UPDATE tb_jobTitle
            SET name_jobTitle = p_name_jobTitle
            WHERE id_jobTitle = p_id_jobTitle;

            SET p_success = TRUE;
            SET p_message = 'Actualización exitosa';
        END IF;

    ELSEIF p_operation = 'DELETE' THEN
        IF p_id_jobTitle IS NULL THEN
            SET p_success = FALSE;
            SET p_message = 'Se requiere proporcionar el ID del título del trabajo para la operación de eliminación';
        ELSE
            -- Validar si el ID está presente en la tabla tb_jobTitle
            SET num_occurrences_job = (SELECT COUNT(*) FROM tb_jobTitle WHERE id_jobTitle = p_id_jobTitle);
            
            IF num_occurrences_job = 0 THEN
                SET p_success = FALSE;
                SET p_message = 'El título del trabajo con el ID proporcionado no existe en la tabla tb_jobTitle';
            ELSE
                -- Validar si el ID está presente en la tabla tb_employee
                SET num_occurrences_emp = (SELECT COUNT(*) FROM tb_employee WHERE id_jobTitle = p_id_jobTitle);
                
                IF num_occurrences_emp > 0 THEN
                    SET p_success = FALSE;
                    SET p_message = 'No se puede eliminar el título del trabajo porque está siendo utilizado en la tabla tb_employee';
                ELSE
                    DELETE FROM tb_jobTitle
                    WHERE id_jobTitle = p_id_jobTitle;

                    SET p_success = TRUE;
                    SET p_message = 'Eliminación exitosa';
                END IF;
            END IF;
        END IF;

    ELSE
        SET p_success = FALSE;
        SET p_message = 'Operación no válida';

    END IF;

    COMMIT;
    
END $$
DELIMITER ;


-- ------------------------------------------------------------------------------------

CREATE EVENT AssignVacationDaysEvent
    ON SCHEDULE EVERY 1 DAY -- Se ejecuta cada dia
    DO CALL pa_assignVacationDays();


DELIMITER $$

CREATE PROCEDURE pa_assignVacationDays()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE _id_employee INT;
    DECLARE _start_date DATE;
    DECLARE _start_date_origin DATE;
    DECLARE _end_date DATE;
    DECLARE _earned_days_vacation INT;
    DECLARE _balance_working_days INT;
    DECLARE _id_codeType INT;
    DECLARE _years_of_service INT;
    DECLARE _earned_days INT;
    DECLARE _balance_days DECIMAL(10,2);
    DECLARE _working_days INT;
    DECLARE _weekend_days INT;
    DECLARE _balance_periods DECIMAL(10,2);
    DECLARE _id_vacationPeriod INT;
    DECLARE _count_periods INT;
    DECLARE cur CURSOR FOR
	SELECT 
	    e.id_employee,
	    vp.startDate_vacationPeriod,
	    vp.endDate_vacationPeriod,
	    vp.earnedDays_vacationPeriod,
	    vp.balanceWorkingDays_vacationPeriod,
	    e.id_codeType
	FROM
	    tb_employee e
	INNER JOIN 
	    tb_vacationPeriod vp ON e.id_employee = vp.id_employee
	INNER JOIN
	    (SELECT id_employee, MAX(startDate_vacationPeriod) as MaxStartDate
	     FROM tb_vacationPeriod
	     WHERE state_vacationPeriod = 1
	     GROUP BY id_employee) subq ON e.id_employee = subq.id_employee AND vp.startDate_vacationPeriod = subq.MaxStartDate
	WHERE
	    vp.state_vacationPeriod = 1 AND DATEDIFF(CURDATE(), vp.endDate_vacationPeriod) >= 365; -- Periodo activo y busca al finalizar un año;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO _id_employee, _start_date, _end_date, _earned_days_vacation, _balance_working_days, _id_codeType;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        -- Obtener fecha de inicio laboral
        SET _start_date_origin = (SELECT startDate_employee FROM tb_employee WHERE id_employee = _id_employee);
        
        -- Cacula tiempo tatal que lleva trabajando, en base al tiempo de inicio laboral, con el tiempo actual     
        SET _years_of_service = TIMESTAMPDIFF(YEAR, _start_date_origin, DATE_ADD(CURDATE(), INTERVAL 1 DAY));
        
        -- Suma de los saldso de los periodos
   	  SET _balance_periods = (SELECT SUM(balanceDays_vacationPeriod) FROM tb_vacationPeriod
		  WHERE id_employee = _id_employee AND state_vacationPeriod = 1);
		  
        -- Condicionales LOSEP
        IF _id_codeType = 1 THEN
        		SET _earned_days = 30;
        		SET _working_days = 22;
        		SET _weekend_days = 8;
        		
				-- Desactivación de periodo más antiguo
				IF (_balance_periods + _earned_days) > 60 THEN
					-- Captura el id, del periodo más antiguo, activo
					SET _id_vacationPeriod = (SELECT id_vacationPeriod FROM tb_vacationPeriod
					WHERE id_employee = _id_employee AND state_vacationPeriod = 1
					ORDER BY startDate_vacationPeriod ASC LIMIT 1);
					-- Desactiva el periodo más antiguo
					UPDATE tb_vacationPeriod 
        			SET state_vacationPeriod = 0 WHERE id_vacationPeriod = _id_vacationPeriod;
        		END IF;
        		
        		-- Creación de nuevo periodo
				INSERT INTO tb_vacationPeriod 
				(id_employee, 
				startDate_vacationPeriod, 
				endDate_vacationPeriod, 
				earnedDays_vacationPeriod, 
				balanceDays_vacationPeriod, 
				balanceWorkingDays_vacationPeriod,
				balanceWeekendDays_vacationPeriod,
				state_vacationPeriod)		
				VALUES 
				(_id_employee, 
				DATE_ADD(_end_date, INTERVAL 1 DAY), 
				DATE_ADD(DATE_ADD(_end_date, INTERVAL 1 YEAR),INTERVAL -1 DAY),
				_earned_days, 
				_earned_days, 
				_working_days,
				_weekend_days,
				1);
				
        -- Condicionales código de trabajo
        ELSEIF _id_codeType = 2 THEN
			    -- Asignación de dias de acuerdo al año
			    IF _years_of_service >= 5 AND _years_of_service < 20 THEN
			        SET _earned_days = _earned_days_vacation + 1;
			        SET _working_days = _balance_working_days + 1;
			        SET _weekend_days = 4;
			    ELSEIF _years_of_service >= 20 THEN
			        SET _earned_days = 30;
			        SET _working_days = 26;
			        SET _weekend_days = 4;
			    ELSE
			        SET _earned_days = 15;
			        SET _working_days = 11;
			        SET _weekend_days = 4;
			    END IF;
			    
			    -- Cantidad de periodos activos
			    SET _count_periods = (SELECT COUNT(*) FROM tb_vacationperiod 
				 WHERE id_employee = _id_employee AND state_vacationPeriod = 1);
        		
				-- Desactivación de periodo más antiguo
				IF (_count_periods + 1) > 3 THEN
					-- Captura el id, del periodo más antiguo, activo
					SET _id_vacationPeriod = (SELECT id_vacationPeriod FROM tb_vacationPeriod
					WHERE id_employee = _id_employee AND state_vacationPeriod = 1
					ORDER BY startDate_vacationPeriod ASC LIMIT 1);
					-- Desactiva el periodo más antiguo
					UPDATE tb_vacationPeriod 
        			SET state_vacationPeriod = 0 WHERE id_vacationPeriod = _id_vacationPeriod; 
				END IF;
				-- Creación de nuevo periodo
				INSERT INTO tb_vacationPeriod 
				(id_employee, 
				startDate_vacationPeriod, 
				endDate_vacationPeriod, 
				earnedDays_vacationPeriod, 
				balanceDays_vacationPeriod, 
				balanceWorkingDays_vacationPeriod,
				balanceWeekendDays_vacationPeriod,
				state_vacationPeriod)		
				VALUES 
				(_id_employee, 
				DATE_ADD(_end_date, INTERVAL 1 DAY), 
				DATE_ADD(DATE_ADD(_end_date, INTERVAL 1 YEAR),INTERVAL -1 DAY),
				_earned_days, 
				_earned_days, 
				_working_days,
				_weekend_days,
				1);
        		
        END IF;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;


-- ---------------------------------------------------------------------------
DELIMITER $$

CREATE EVENT resetNumberPeriod
ON SCHEDULE EVERY 1 YEAR STARTS CONCAT(YEAR(NOW()), '-01-01 00:00:00')
DO CALL pa_resetNumberPeriod() $$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE pa_resetNumberPeriod()
BEGIN
    DECLARE thisYear YEAR;
    DECLARE existingId INT;

    -- Obtener el año actual
    SET thisYear = YEAR(CURDATE());

    -- Verificar si ya existe un registro para este año
    SELECT id_numberPeriod INTO existingId
    FROM tb_numberPeriod
    WHERE year_numberPeriod = thisYear
    LIMIT 1;

    -- Si no existe un registro para este año
    IF existingId IS NULL THEN
        -- Deshabilitar todos los registros anteriores
        UPDATE tb_numberPeriod
        SET state_numberPeriod = FALSE
        WHERE year_numberPeriod < thisYear;

        -- Crear un nuevo registro para este año
        INSERT INTO tb_numberPeriod (year_numberPeriod, count_numberPeriod, state_numberPeriod)
        VALUES (thisYear, 0, TRUE);
    END IF;
END $$

DELIMITER ;


-- --------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE pa_insertVacationPeriods(
  IN p_id_employee INT,
  OUT p_message VARCHAR(255),
  OUT p_success BOOLEAN
)
BEGIN
  DECLARE v_yearCount INT DEFAULT 0;
  DECLARE v_startDate DATE;
  DECLARE v_startDate_while DATE;
  DECLARE v_endDate_while DATE;
  DECLARE v_exists INT;
  DECLARE v_lastID INT;
  DECLARE v_id_codeType INT;
  DECLARE v_maxYearCount INT;
  DECLARE v_earnedDays INT;
  DECLARE v_balanceDays INT;
  DECLARE v_workingDays INT;
  DECLARE v_employeeEligible BOOLEAN DEFAULT TRUE;
  
  SET v_earnedDays = 15;
  SET v_balanceDays = 15;
  SET v_workingDays = 11;

  -- Iniciar la transacción
  START TRANSACTION;

  -- Obtener la fecha de inicio del empleado
  SELECT startDate_employee INTO v_startDate FROM tb_employee WHERE id_employee = p_id_employee;

  -- Establecer el número de años que han pasado desde la fecha de inicio hasta un año antes de la fecha actual
  SET v_maxYearCount = TIMESTAMPDIFF(YEAR, v_startDate, CURDATE()) - 1;

  -- Verificar si el empleado tiene menos de un año de inicio laboral
  IF v_maxYearCount < 0 THEN
    SET v_employeeEligible = FALSE;
  END IF;

  IF v_employeeEligible THEN
    -- Verificar si ya existen periodos de vacaciones para el empleado
    SELECT COUNT(*) INTO v_exists FROM tb_vacationPeriod WHERE id_employee = p_id_employee;

    IF v_exists = 0 THEN
      -- Insertar un período de vacaciones para cada año desde la fecha de inicio hasta un año antes de la fecha actual
      WHILE v_yearCount <= v_maxYearCount DO
        -- Establecer las fechas de inicio y fin para el período de vacaciones
        SET v_startDate_while = DATE_ADD(v_startDate, INTERVAL v_yearCount YEAR);
        SET v_endDate_while = DATE_SUB(DATE_ADD(v_startDate, INTERVAL (v_yearCount + 1) YEAR), INTERVAL 1 DAY);

        -- Establecer los días acumulados y laborables para el id_codeType 2 a partir del sexto año
        IF v_yearCount >= 5 AND v_yearCount < 20 THEN
          SET v_earnedDays = v_earnedDays + 1;
          SET v_balanceDays = v_balanceDays + 1;
          SET v_workingDays = v_workingDays + 1;
        ELSEIF v_yearCount >= 20 THEN
          SET v_earnedDays = 30;
          SET v_balanceDays = 30;
          SET v_workingDays = 26;
        END IF;

        -- Insertar el período de vacaciones
        INSERT INTO tb_vacationPeriod (
          id_employee,
          startDate_vacationPeriod,
          endDate_vacationPeriod,
          earnedDays_vacationPeriod,
          balanceDays_vacationPeriod,
          balanceWorkingDays_vacationPeriod,
          balanceWeekendDays_vacationPeriod,
          state_vacationPeriod
        )
        VALUES (
          p_id_employee,
          v_startDate_while,
          v_endDate_while,
           0,
          0,
          0,
          0,
          FALSE
        );

        -- Guardar el último id insertado
        SET v_lastID = LAST_INSERT_ID();

        -- Incrementar el contador de años
        SET v_yearCount = v_yearCount + 1;
      END WHILE;

      -- Actualizar el último periodo de vacaciones con los valores especificados dependiendo del id_codeType
      SELECT id_codeType INTO v_id_codeType FROM tb_employee WHERE id_employee = p_id_employee;

      IF v_id_codeType = 1 THEN
        UPDATE tb_vacationPeriod 
        SET 
          earnedDays_vacationPeriod = 30,
          balanceDays_vacationPeriod = 30,
          balanceWorkingDays_vacationPeriod = 22,
          balanceWeekendDays_vacationPeriod = 8,
          state_vacationPeriod = TRUE
        WHERE 
          id_vacationPeriod = v_lastID;
      ELSEIF v_id_codeType = 2 THEN
        UPDATE tb_vacationPeriod 
        SET 
          earnedDays_vacationPeriod = v_earnedDays,
          balanceDays_vacationPeriod = v_balanceDays,
          balanceWorkingDays_vacationPeriod = v_workingDays,
          balanceWeekendDays_vacationPeriod = 4,
          state_vacationPeriod = TRUE
        WHERE 
          id_vacationPeriod = v_lastID;
      END IF;

      -- Commit de la transacción
      COMMIT;
      SET p_success = TRUE;
      SET p_message = "Períodos de vacaciones insertados correctamente";
    ELSE
      -- Rollback de la transacción
      ROLLBACK;
      SET p_success = FALSE;
      SET p_message = "Los periodos de vacaciones ya existen para el empleado.";
    END IF;
  ELSE
    -- Rollback de la transacción
    ROLLBACK;
    SET p_success = FALSE;
    SET p_message = "El empleado aún no cumple un año laboral.";
  END IF;
END $$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE pa_nextVacationPeriod(
  IN p_id_employee INT,
  OUT p_message VARCHAR(255),
  OUT p_success BOOLEAN
)
BEGIN
  DECLARE v_yearCount INT;
  DECLARE v_startDate DATE;
  DECLARE v_startDate_currentYear DATE;
  DECLARE v_endDate_currentYear DATE;
  DECLARE v_exists INT;
  DECLARE v_codeType INT;
  DECLARE v_earnedDays INT;
  DECLARE v_balanceDays INT;
  DECLARE v_workingDays INT;
  DECLARE v_weekendDays INT;
  
  -- Obtener la fecha de inicio del empleado y el codeType
  SELECT startDate_employee, id_codeType INTO v_startDate, v_codeType FROM tb_employee WHERE id_employee = p_id_employee;

  -- Obtener el año actual
  SET v_yearCount = YEAR(CURDATE()) - YEAR(v_startDate);

  -- Establecer las fechas de inicio y fin para el período de vacaciones del año actual
  SET v_startDate_currentYear = DATE_ADD(v_startDate, INTERVAL v_yearCount YEAR);
  SET v_endDate_currentYear = DATE_SUB(DATE_ADD(v_startDate, INTERVAL (v_yearCount + 1) YEAR), INTERVAL 1 DAY);

  -- Verificar si ya existe un período de vacaciones para el año actual
  SELECT COUNT(*) INTO v_exists
  FROM tb_vacationPeriod
  WHERE id_employee = p_id_employee
    AND startDate_vacationPeriod = v_startDate_currentYear
    AND endDate_vacationPeriod = v_endDate_currentYear;

  IF v_exists = 0 THEN
    -- Verificar si existen períodos de vacaciones anteriores al año actual
    SELECT COUNT(*) INTO v_exists
    FROM tb_vacationPeriod
    WHERE id_employee = p_id_employee
      AND startDate_vacationPeriod < v_startDate_currentYear;

    IF v_exists > 0 THEN
      SET p_success = FALSE;
      SET p_message = "Ya existen períodos de vacaciones anteriores al año actual";
    ELSE
      -- Establecer los valores de días según el codeType
      IF v_codeType = 1 THEN
        SET v_earnedDays = 30;
        SET v_balanceDays = 30;
        SET v_workingDays = 22;
        SET v_weekendDays = 8;
      ELSEIF v_codeType = 2 THEN
        SET v_earnedDays = 15;
        SET v_balanceDays = 15;
        SET v_workingDays = 11;
        SET v_weekendDays = 4;
      END IF;

      -- Insertar el período de vacaciones para el año actual
      INSERT INTO tb_vacationPeriod (
        id_employee,
        startDate_vacationPeriod,
        endDate_vacationPeriod,
        earnedDays_vacationPeriod,
        balanceDays_vacationPeriod,
        balanceWorkingDays_vacationPeriod,
        balanceWeekendDays_vacationPeriod,
        state_vacationPeriod
      )
      VALUES (
        p_id_employee,
        v_startDate_currentYear,
        v_endDate_currentYear,
        v_earnedDays,
        v_balanceDays,
        v_workingDays,
        v_weekendDays,
        TRUE
      );

      SET p_success = TRUE;
      SET p_message = "Período de vacaciones creado correctamente para el año actual";
    END IF;
  ELSE
    SET p_success = FALSE;
    SET p_message = "Ya existe un período de vacaciones para el año actual";
  END IF;
END $$
DELIMITER ;


DELIMITER $$

CREATE PROCEDURE pa_updateVacationPeriod(
  IN p_id_vacationPeriod INT,
  IN p_startDate_vacationPeriod DATE,
  IN p_endDate_vacationPeriod DATE,
  IN p_earnedDays_vacationPeriod DECIMAL(10, 2),
  IN p_balanceDays_vacationPeriod DECIMAL(10, 2),
  IN p_balanceWorkingDays_vacationPeriod DECIMAL(10, 2),
  IN p_balanceWeekendDays_vacationPeriod DECIMAL(10, 2),
  IN p_state_vacationPeriod BOOL,
  OUT p_message VARCHAR(255),
  OUT p_success BOOL
)
BEGIN
  DECLARE error_message TEXT DEFAULT NULL;
  DECLARE error_code INT DEFAULT NULL;

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS CONDITION 1
      error_code = MYSQL_ERRNO,
      error_message = MESSAGE_TEXT;
  END;

  START TRANSACTION;

  UPDATE tb_vacationPeriod
  SET
    startDate_vacationPeriod = p_startDate_vacationPeriod,
    endDate_vacationPeriod = p_endDate_vacationPeriod,
    earnedDays_vacationPeriod = p_earnedDays_vacationPeriod,
    balanceDays_vacationPeriod = p_balanceDays_vacationPeriod,
    balanceWorkingDays_vacationPeriod = p_balanceWorkingDays_vacationPeriod,
    balanceWeekendDays_vacationPeriod = p_balanceWeekendDays_vacationPeriod,
    state_vacationPeriod = p_state_vacationPeriod
  WHERE id_vacationPeriod = p_id_vacationPeriod;

  IF error_message IS NOT NULL THEN
    ROLLBACK;
    SET p_message = error_message;
    SET p_success = FALSE;
  ELSE
    IF ROW_COUNT() > 0 THEN
      COMMIT;
      SET p_message = 'Datos actualizados correctamente';
      SET p_success = TRUE;
    ELSE
      ROLLBACK;
      SET p_message = 'No se encontró ningún registro con el ID proporcionado';
      SET p_success = FALSE;
    END IF;
  END IF;
END $$

DELIMITER ;




-- ------------------------------------------------------------------------------------------



DELIMITER $$

CREATE PROCEDURE pa_insertPermissionEmployee(
  IN p_id_employee INT,
  IN p_id_reason INT,
  IN p_startDate DATETIME,
  IN p_endDate DATETIME,
  IN p_observation_permission VARCHAR(255),
  OUT message VARCHAR(255),
  OUT success BOOLEAN
)
BEGIN
  DECLARE v_id_numberPeriod INT DEFAULT 1;
  DECLARE v_workingDays DECIMAL(10,2) DEFAULT 0;
  DECLARE v_weekendDays DECIMAL(10,2) DEFAULT 0;
  DECLARE v_tempDate DATE;
  DECLARE v_balanceDays DECIMAL(10,2); 
  DECLARE v_balanceWorkingDays DECIMAL(10,2);
  DECLARE v_balanceWeekendDays DECIMAL(10,2);
  DECLARE v_id_vacationPeriod INT;
  DECLARE v_vacationExists BOOLEAN;
  DECLARE v_pendingPermissionExists BOOLEAN;
  DECLARE v_codeType INT;
  DECLARE v_startTime TIME;
  DECLARE v_endTime TIME;
  DECLARE v_timeDiff INT;
  DECLARE v_timeInDays DECIMAL(10,2);
  DECLARE v_carry DECIMAL(10,2) DEFAULT 0;
  DECLARE v_issueNumber INT;
  DECLARE v_id_reason_vacaciones INT;

  -- Obtener el id_codeType del empleado
  SELECT id_codeType INTO v_codeType FROM tb_employee WHERE id_employee = p_id_employee;
  
   -- Obtener el id_reason para "vacaciones"
  SELECT id_reason INTO v_id_reason_vacaciones FROM tb_reason
  WHERE LOWER(name_reason) LIKE '%vacaciones%';

  -- Verificar si existe un permiso pendiente
  SELECT EXISTS(
    SELECT 1
    FROM tb_permission
    WHERE id_employee = p_id_employee
    AND state_permission = 'P'
  ) INTO v_pendingPermissionExists;

  IF v_pendingPermissionExists = FALSE THEN
    IF p_id_reason = v_id_reason_vacaciones THEN
      -- Verificar si existe un periodo de vacaciones activo 
      SELECT EXISTS(
        SELECT 1
        FROM tb_vacationPeriod 
        WHERE id_employee = p_id_employee
          AND state_vacationPeriod = TRUE 
      ) INTO v_vacationExists;
    ELSE 
      SET v_vacationExists = TRUE;
    END IF;
   
    IF v_vacationExists = FALSE THEN
      SET message = 'No tiene periodo de vacaciones activo';
      SET success = FALSE;
    ELSE
      -- Seleccionan el periodo más antiguo activo
      SELECT id_vacationPeriod, balanceDays_vacationPeriod, balanceWorkingDays_vacationPeriod, balanceWeekendDays_vacationPeriod
      INTO v_id_vacationPeriod, v_balanceDays, v_balanceWorkingDays, v_balanceWeekendDays
      FROM tb_vacationPeriod
      WHERE id_employee = p_id_employee AND state_vacationPeriod = TRUE 
      ORDER BY endDate_vacationPeriod ASC
      LIMIT 1;
      -- Obtener el id_numberPeriod activo
      SELECT id_numberPeriod
      INTO v_id_numberPeriod
      FROM tb_numberPeriod
      WHERE state_numberPeriod = TRUE;
      -- Validar si las fechas ingresadas son la misma, es decir para comprobar las horas
      IF (DATE(p_startDate) = DATE(p_endDate)) AND (TIME(p_startDate) <> '00:00:00' OR TIME(p_endDate) <> '00:00:00') THEN
        -- Validar que no sea dias de fin de semana (sábado o domingo)
        IF WEEKDAY(p_startDate) <> 5 AND WEEKDAY(p_startDate) <> 6 THEN
          -- Validar el rango de horario según el id_codeType
          IF v_codeType = 1 AND (TIME(p_startDate) < '08:00:00' OR TIME(p_endDate) > '16:30:00') THEN
            SET message = 'Las horas seleccionadas no están de acuerdo a su horario. El rango de horario debe ser de 8:00 a 16:30.';
            SET success = FALSE;
          ELSEIF v_codeType = 2 AND (TIME(p_startDate) < '07:00:00' OR TIME(p_endDate) > '15:30:00') THEN
            SET message = 'Las horas seleccionadas no están de acuerdo a su horario. El rango de horario debe ser de 7:00 a 15:30.';
            SET success = FALSE;
          ELSE
            -- Verificar Rango de fecha y hora
            IF TIME(p_startDate) >= TIME(p_endDate) THEN
              SET message = 'El rango de hora es incorrecto.';
              SET success = FALSE;
            ELSE
              -- Calcular la diferencia de tiempo en minutos
              SET v_timeDiff = TIME_TO_SEC(TIMEDIFF(p_endDate, p_startDate)) / 60;
              -- Convertir saldo de dias laborales en minutos
              SET v_balanceDays = v_balanceDays * 8 * 60;     
              -- Devuelve media hora si pide permiso en horario especifico y cuando pasa las 5 horas y media
              IF (TIME(p_startDate) = '12:00:00' AND TIME(p_endDate) = '14:00:00') OR v_timeDiff = 330 OR v_timeDiff = 510 THEN
                SET v_timeDiff = v_timeDiff - 30;
              END IF;
              
              -- Convertir la diferencia de tiempo en días
              SET v_workingDays = v_timeDiff / (8 * 60);
              
                -- Control de dias laboales en caso de que sean vacaciones
                IF p_id_reason = v_id_reason_vacaciones THEN
                  -- Obtener carry anterior
                  SET v_carry = (SELECT IFNULL((
                    SELECT carry_permission
                    FROM tb_permission
                    WHERE id_reason = v_id_reason_vacaciones AND id_employee = p_id_employee
                    ORDER BY id_permission DESC
                    LIMIT 1
                  ), 0));
                  
                  -- Validar si pasa de los 5 dias acumulados le descuente 2 dias de fines de semana
                  IF (v_carry + v_workingDays) < 5 THEN 
                    SET v_carry = v_carry + v_workingDays;
                  ELSEIF (v_carry + v_workingDays) >= 5 AND v_balanceWeekendDays > 0 THEN
                    SET v_weekendDays = 2;
                    SET v_carry = (v_carry + v_workingDays) - 5;
                  END IF;
                END IF;
                
              SET success = TRUE;
              
              IF success = TRUE THEN
                INSERT INTO tb_permission (
                  id_employee,
                  id_reason,
                  id_numberPeriod,
                  issueDate_permission,
                  state_permission,
                  startDateTime_permission,
                  endDateTime_permission,
                  workingDays_permission,
                  weekendDays_permission,
                  carry_permission,
                  observation_permission
                )
                VALUES (
                  p_id_employee,
                  p_id_reason,
                  v_id_numberPeriod,
                  CURRENT_DATE(),
                  'P',
                  p_startDate,
                  p_endDate,
                  v_workingDays,
                  v_weekendDays,
                  v_carry,
                  p_observation_permission
                );
                -- Actualizar el contador en tb_numberPeriod
                UPDATE tb_numberPeriod
                SET count_numberPeriod = count_numberPeriod + 1
                WHERE id_numberPeriod = v_id_numberPeriod;
                -- Actualizar el estado de la fecha atrasado en caso de haber
                UPDATE tb_permissionBack
                SET state_permissionBack = 0
                WHERE id_employee = p_id_employee AND state_permissionBack = 1;
                -- Obtener contador actual
                SELECT count_numberPeriod
                INTO v_issueNumber
                FROM tb_numberPeriod
                WHERE id_numberPeriod = v_id_numberPeriod;
                -- Actualizar numero de documento
                SET @lastInsertId = LAST_INSERT_ID();
                UPDATE tb_permission
                SET issueNumber_permission = v_issueNumber
                WHERE id_permission = @lastInsertId;

                SET message = 'Permiso solicitado exitosamente.';
                SET success = TRUE;
              END IF;
              -- SET message = v_balanceWorkingDays;
            END IF;
          END IF;
        ELSE
          SET message = 'Solo aplica para dias laborables';
          SET success = FALSE;
        END IF;
      ELSE
        -- Validar que no sea dias de fin de semana (sábado o domingo)
        IF ((DATE(p_startDate) <> DATE(p_endDate)) AND (WEEKDAY(p_startDate) <> 5 AND WEEKDAY(p_endDate) <> 6)) OR 
		   ((WEEKDAY(p_startDate) <> 5 AND WEEKDAY(p_startDate) <> 6) AND (WEEKDAY(p_endDate) <> 5 AND WEEKDAY(p_endDate) <> 6)) THEN
          -- Verificar Rango de fecha
          IF DATE(p_startDate) > DATE(p_endDate) THEN
            SET message = 'El rango de fechas es incorrecto.';
            SET success = FALSE;
          ELSE
            SET v_workingDays = 0;
            SET v_weekendDays = 0;
            SET v_tempDate = DATE(p_startDate);

            -- Calcular los dias laborales y fines de semana
            WHILE v_tempDate <= DATE(p_endDate) DO
              IF WEEKDAY(v_tempDate) BETWEEN 0 AND 4 THEN
                SET v_workingDays = v_workingDays + 1;
              ELSEIF WEEKDAY(v_tempDate) IN (5, 6) THEN
                SET v_weekendDays = v_weekendDays + 1;
              END IF;
              SET v_tempDate = DATE_ADD(v_tempDate, INTERVAL 1 DAY);
            END WHILE;
            
            -- Verificar que si los dias laborales y fines de semanas no exceden del saldo de dias.
            IF (v_workingDays + v_weekendDays) > v_balanceDays THEN
              SET message = CONCAT('Se excede en ',v_balanceDays - (v_workingDays + v_balanceWeekendDays), ' día(s).');
              SET success = FALSE;
            ELSE
               -- Control de dias laboales en caso de que sean vacaciones
              IF p_id_reason = v_id_reason_vacaciones THEN
                -- Obtener carry anterior
                SET v_carry = (SELECT IFNULL((
                  SELECT carry_permission
                  FROM tb_permission
                  WHERE id_reason = v_id_reason_vacaciones AND id_employee = p_id_employee
                  ORDER BY id_permission DESC
                  LIMIT 1
                ), 0));
                
                -- Validar si pasa de los 5 dias acumulados le descuente 2 dias de fines de semana
                IF (v_carry + v_workingDays) < 5 THEN 
                  SET v_carry = v_carry + v_workingDays;
                ELSEIF (v_carry + v_workingDays) >= 5 AND v_workingDays <= 5 AND v_balanceWeekendDays > 0 THEN
                  SET v_weekendDays = 2;
                  SET v_carry = (v_carry + v_workingDays) - 5;
                END IF;
                
                -- Validar si los fines de semana exceden al saldo de fines de semana
                IF v_weekendDays > v_balanceWeekendDays THEN
                  SET v_workingDays = v_workingDays + (v_weekendDays - v_balanceWeekendDays);
                  SET v_weekendDays = v_balanceWeekendDays;
                END IF;
              END IF;
             
              INSERT INTO tb_permission (
                id_employee,
                id_reason,
                id_numberPeriod,
                issueDate_permission,
                state_permission,
                startDateTime_permission,
                endDateTime_permission,
                workingDays_permission,
                weekendDays_permission,
                carry_permission,
                observation_permission
              )
              VALUES (
                p_id_employee,
                p_id_reason,
                v_id_numberPeriod,
                CURRENT_DATE(),
                'P',
                p_startDate,
                p_endDate,
                v_workingDays,
                v_weekendDays,
                v_carry,
                p_observation_permission
              );
              
              -- Actualizar el contador en tb_numberPeriod
              UPDATE tb_numberPeriod
              SET count_numberPeriod = count_numberPeriod + 1
              WHERE id_numberPeriod = v_id_numberPeriod;
              -- Actualizar el estado de la fecha atrasado en caso de haber
              UPDATE tb_permissionBack
              SET state_permissionBack = 0
              WHERE id_employee = p_id_employee AND state_permissionBack = 1;
              -- Obtener contador actual
              SELECT count_numberPeriod
              INTO v_issueNumber
              FROM tb_numberPeriod
              WHERE id_numberPeriod = v_id_numberPeriod;
              -- Actualizar numero de documento
              SET @lastInsertId = LAST_INSERT_ID();
              UPDATE tb_permission
              SET issueNumber_permission = v_issueNumber
              WHERE id_permission = @lastInsertId;

              SET message = 'Permiso solicitado exitosamente.';
              SET success = TRUE;
            END IF;
          END IF;
        ELSE
          SET message = 'Solo aplica para dias laborables';
          SET success = FALSE;
        END IF;
      END IF;
    END IF;
  ELSE
    SET message = 'Ya existe un permiso pendiente, espere una respuesta';
    SET success = FALSE;
  END IF;
  
END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE pa_updatePermissionState(
  IN p_id_permission INT,
  IN p_state CHAR(1),
  IN p_message VARCHAR(255),
  OUT message VARCHAR(255),
  OUT success BOOLEAN
)
BEGIN
  DECLARE v_id_employee INT;
  DECLARE v_id_reason INT;
  DECLARE v_workingDays DECIMAL(10,2);
  DECLARE v_weekendDays DECIMAL(10,2);
  DECLARE v_id_vacationPeriod INT;
  DECLARE v_state_permission CHAR(1);
  DECLARE v_id_reason_vacaciones INT;
  DECLARE v_carry_now INT;
  DECLARE v_carry INT DEFAULT 0;

  -- Obtener el id_reason para "vacaciones"
  SELECT id_reason INTO v_id_reason_vacaciones
	FROM tb_reason
	WHERE LOWER(name_reason) LIKE '%vacaciones%';

  -- Obtener los detalles del permiso
  SELECT id_employee, id_reason, workingDays_permission, weekendDays_permission, state_permission, carry_permission
  INTO v_id_employee, v_id_reason, v_workingDays, v_weekendDays, v_state_permission, v_carry_now
  FROM tb_permission
  WHERE id_permission = p_id_permission;

  -- Obtener el id_vacationPeriod activo más antiguo
  SELECT id_vacationPeriod
  INTO v_id_vacationPeriod
  FROM tb_vacationPeriod
  WHERE id_employee = v_id_employee AND state_vacationPeriod = TRUE
  ORDER BY endDate_vacationPeriod ASC
  LIMIT 1;

  -- Si el estado es cambiado a Validado y el estado previo es Pendiente
  IF (p_state = 'V' AND v_state_permission = 'P') OR (p_state = 'V' AND v_state_permission = 'R') THEN
    
    -- Comprobar si id_reason corresponde a "vacaciones" antes de realizar descuentos
    IF v_id_reason = v_id_reason_vacaciones THEN
    		IF p_state = 'V' AND v_state_permission = 'P' THEN
    			SET v_carry = v_carry_now;
    		ELSEIF p_state = 'V' AND v_state_permission = 'R' THEN
    			IF (v_workingDays + v_carry_now) >= 5 THEN
    				SET v_carry = (v_workingDays + v_carry_now) - 5;
    			ELSE
    				SET v_carry = v_carry_now + v_workingDays;
    			END IF;
    		END IF;
    		
        UPDATE tb_vacationPeriod
        SET balanceDays_vacationPeriod = balanceDays_vacationPeriod - (v_workingDays + v_weekendDays),
            balanceWorkingDays_vacationPeriod = balanceWorkingDays_vacationPeriod - v_workingDays,
            balanceWeekendDays_vacationPeriod = balanceWeekendDays_vacationPeriod - v_weekendDays,
            state_vacationPeriod = balanceWorkingDays_vacationPeriod > 0
        WHERE id_vacationPeriod = v_id_vacationPeriod;
    END IF;
    
    UPDATE tb_permission
    SET state_permission = p_state,
    		carry_permission = v_carry,
        adminObservation_permission = p_message
    WHERE id_permission = p_id_permission;

    SET message = 'Permiso validado exitosamente.';
    SET success = TRUE;

  -- Si el estado es cambiado a Rechazado y el estado previo es Aprobado
  ELSEIF p_state = 'R' AND v_state_permission = 'V' THEN
    -- Comprobar si id_reason corresponde a "vacaciones" antes de realizar la devolución
    IF v_id_reason = v_id_reason_vacaciones THEN
     		
     		SET @count_permiss = (SELECT COUNT(*) FROM tb_permission
			WHERE id_reason = v_id_reason_vacaciones AND id_employee = v_id_employee); 
			
			IF @count_permiss > 1 THEN
				 -- Obtener carry anterior
				SET v_carry = (SELECT carry_permission FROM tb_permission WHERE id_permission <> p_id_permission 
				AND id_reason = v_id_reason_vacaciones AND id_employee = v_id_employee
				ORDER BY id_permission DESC LIMIT 1);
			END IF;
								
        UPDATE tb_vacationPeriod
        SET balanceDays_vacationPeriod = balanceDays_vacationPeriod + (v_workingDays + v_weekendDays),
            balanceWorkingDays_vacationPeriod = balanceWorkingDays_vacationPeriod + v_workingDays,
            balanceWeekendDays_vacationPeriod = balanceWeekendDays_vacationPeriod + v_weekendDays,
            state_vacationPeriod = balanceWorkingDays_vacationPeriod > 0
        WHERE id_vacationPeriod = v_id_vacationPeriod;
    END IF;
    
    UPDATE tb_permission
    SET state_permission = p_state,
    		carry_permission = v_carry,
        adminObservation_permission = p_message
    WHERE id_permission = p_id_permission;

    SET message = 'Permiso rechazado y cambios revertidos.';
    SET success = TRUE;

  -- Si el estado es cambiado a Rechazado y el estado previo es Pendiente
  ELSEIF p_state = 'R' AND v_state_permission = 'P' THEN
    -- En caso de ser vacaciones aplica la logica del carry
		IF v_id_reason = v_id_reason_vacaciones THEN
			
			SET @count_permiss = (SELECT COUNT(*) FROM tb_permission
			WHERE id_reason = v_id_reason_vacaciones AND id_employee = v_id_employee); 
			
			IF @count_permiss > 1 THEN
				 -- Obtener carry anterior
				SET v_carry = (SELECT carry_permission FROM tb_permission WHERE id_permission <> p_id_permission 
				AND id_reason = v_id_reason_vacaciones AND id_employee = v_id_employee
				ORDER BY id_permission DESC LIMIT 1);
			END IF;
			   
		END IF;

	   UPDATE tb_permission
      SET state_permission = p_state,
      	carry_permission = v_carry,
        adminObservation_permission = p_message
      WHERE id_permission = p_id_permission;

      SET message = 'Permiso rechazado.';
      SET success = TRUE;

  ELSE
    SET message = 'Transición de estado no válida.';
    SET success = FALSE;
  END IF;

END $$

DELIMITER ;


-- -------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE pa_insertPermissionBack(
    IN id_employee INT,
    IN minDate_permissionBack DATE,
    IN state_permissionBack BOOLEAN,
    OUT message VARCHAR(255),
    OUT success BOOLEAN
)
BEGIN
    DECLARE error INT DEFAULT 0;
    DECLARE employeeCount INT DEFAULT 0;
    
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        SET error = 1;
        SET message = 'Error al insertar el registro en tb_permissionBack.';
        SET success = FALSE;
    END;
    
    START TRANSACTION;
    
    -- Verificar si el id_employee existe
    SELECT COUNT(*) INTO employeeCount FROM tb_employee WHERE id_employee = id_employee;
    
    IF employeeCount = 0 THEN
        SET message = 'El id_employee no existe.';
        SET success = FALSE;
        SET error = 1;
    ELSE
        SET @issueDate_permissionBack = CURRENT_TIMESTAMP();
        
        INSERT INTO tb_permissionBack (id_employee, issueDate_permissionBack, minDate_permissionBack, state_permissionBack)
        VALUES (id_employee, @issueDate_permissionBack, minDate_permissionBack, state_permissionBack);
        
        IF error = 0 THEN
            COMMIT;
            SET message = 'El registro se insertó correctamente';
            SET success = TRUE;
        ELSE
            ROLLBACK;
        END IF;
    END IF;
    
END $$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE pa_updatePermissionBack(
    IN p_id_permissionBack INT,
    IN p_minDate_permissionBack DATE,
    IN p_state_permissionBack BOOLEAN,
    OUT message VARCHAR(255),
    OUT success BOOLEAN
)
BEGIN
    DECLARE error INT DEFAULT 0;
    DECLARE permissionCount INT DEFAULT 0;
    
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        SET error = 1;
        SET message = 'Error al insertar el registro en tb_permissionBack.';
        SET success = FALSE;
    END;
    
    START TRANSACTION;
    
    -- Verificar si el p_id_permissionBack existe
    SELECT COUNT(*) INTO permissionCount FROM tb_permissionBack WHERE id_employee = id_employee;
    
    IF permissionCount = 0 THEN
        SET message = 'El id_permissionBack no existe.';
        SET success = FALSE;
        SET error = 1;
    ELSE
        
        UPDATE tb_permissionback SET
		 minDate_permissionBack = p_minDate_permissionBack, 
		 state_permissionBack = p_state_permissionBack
      WHERE id_permissionBack = p_id_permissionBack;
        
        IF error = 0 THEN
            COMMIT;
            SET message = 'Se actualizó correctamente';
            SET success = TRUE;
        ELSE
            ROLLBACK;
        END IF;
    END IF;
    
END $$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE pa_getPermissionBackDate(
  IN p_id_employee INT,
  OUT p_date_permissionBack DATETIME
)
BEGIN
  DECLARE v_exist INT;

  -- Verificar si existe un registro con el id_employee y state específicos
  SELECT COUNT(*) INTO v_exist
  FROM tb_permissionBack
  WHERE id_employee = p_id_employee AND state_permissionBack = 1;

  IF v_exist > 0 THEN
    -- Obtener la fecha del registro correspondiente
    SELECT minDate_permissionBack INTO p_date_permissionBack
    FROM tb_permissionBack
    WHERE id_employee = p_id_employee AND state_permissionBack = 1;
  ELSE
    -- No existe un registro válido, retornar la fecha actual
    SET p_date_permissionBack = NOW();
  END IF;
END $$

DELIMITER ;

/**********************************************************************************************
 ***                                                                                        ***
 ***                                          VISTAS                                        ***
 ***                                                                                        ***
 *********************************************************************************************/


CREATE VIEW vw_users AS
SELECT u.id_user,
	e.id_employee,
	u.id_userType,
	e.ci_employee,
	CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,
	u.name_user,
	u.password_user,
	u.state_user,
	u.createdDate_user,
	u.lastSession_user 
FROM tb_user u INNER JOIN tb_employee e
ON u.id_employee=e.id_employee;


CREATE VIEW view_vacationperiod AS
SELECT 
    v.id_vacationPeriod,
    v.id_employee,
    CONCAT(e.name_employee, ' ', e.lastName_employee) AS full_name,
    DATE_FORMAT(v.startDate_vacationPeriod, '%d/%m/%Y') AS startDate_vacationPeriod,
    DATE_FORMAT(v.endDate_vacationPeriod, '%d/%m/%Y') AS endDate_vacationPeriod,
    v.earnedDays_vacationPeriod,
    v.balanceDays_vacationPeriod,
    v.balanceWorkingDays_vacationPeriod,
    v.balanceWeekendDays_vacationPeriod,
    v.state_vacationPeriod
FROM tb_vacationperiod v
INNER JOIN tb_employee e ON v.id_employee = e.id_employee;


CREATE VIEW vw_permissVacation AS
SELECT
  p.id_permission,
  e.id_employee,
  CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,
  p.id_reason,
  DATE_FORMAT(p.issueDate_permission, '%d/%m/%Y') AS issueDate_permission,
  p.state_permission,
  p.workingDays_permission,
  p.weekendDays_permission,
  p.workingDays_permission + p.weekendDays_permission AS total,
  p.observation_permission
FROM
  tb_permission p
INNER JOIN
  tb_employee e ON p.id_employee = e.id_employee;



CREATE VIEW vw_permissAdmin AS
SELECT
  p.id_permission,
  p.issueNumber_permission,
  e.id_employee,
  CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,
  r.name_reason,
  DATE_FORMAT(p.issueDate_permission, '%d/%m/%Y') AS issueDate_permission,
  p.state_permission,
  IF(TIME(p.startDateTime_permission) = '00:00:00', DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS startDateTime_permission,
  IF(TIME(p.endDateTime_permission) = '00:00:00', DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS endDateTime_permission,
  p.workingDays_permission,
  p.weekendDays_permission,
  p.workingDays_permission + p.weekendDays_permission AS total,
  p.observation_permission
FROM
  tb_permission p
INNER JOIN
  tb_employee e ON p.id_employee = e.id_employee
INNER JOIN 
  tb_reason r ON r.id_reason = p.id_reason;


CREATE VIEW vw_permissEmployeeReport AS
SELECT 
p.id_permission,
p.issueNumber_permission,
DATE_FORMAT(p.issueDate_permission, '%d/%m/%Y') AS issueDate_permission,
e.ci_employee,
e.name_employee,
e.lastName_employee,
d.name_departament,
r.name_reason,
p.observation_permission,
IF(TIME(p.startDateTime_permission) = '00:00:00', DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS startDateTime_permission,
IF(TIME(p.endDateTime_permission) = '00:00:00', DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS endDateTime_permission,
p.workingDays_permission,
p.weekendDays_permission,
COALESCE((SELECT SUM(v.balanceWorkingDays_vacationPeriod) FROM tb_vacationPeriod v WHERE v.id_employee = p.id_employee), 0) AS balanceWorkingDays_vacationPeriod,
COALESCE((SELECT SUM(v.balanceWeekendDays_vacationPeriod) FROM tb_vacationPeriod v WHERE v.id_employee = p.id_employee), 0) AS balanceWeekendDays_vacationPeriod,
p.state_permission,
p.adminObservation_permission
FROM tb_permission p
INNER JOIN tb_employee e ON p.id_employee = e.id_employee
INNER JOIN tb_departament d ON d.id_departament = e.id_departament
INNER JOIN tb_reason r ON r.id_reason = p.id_reason;

  

CREATE VIEW vw_permissBack AS
SELECT pb.id_permissionBack,
pb.id_employee,
CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,
DATE_FORMAT(pb.issueDate_permissionBack, '%d/%m/%Y %H:%i:%s') AS issueDate_permissionBack,
DATE_FORMAT(pb.minDate_permissionBack, '%d/%m/%Y') AS minDate_permissionBack,
pb.state_permissionBack 
FROM tb_permissionback pb
INNER JOIN tb_employee e ON pb.id_employee = e.id_employee;



CREATE VIEW vw_Employees AS
SELECT
e.id_employee,
ct.id_codeType,
    ct.name_codeType,
    tc.id_typeContract,
    tc.name_typeContract,
    d.id_departament,
    jt.id_jobTitle,
    jt.name_jobTitle,
    d.name_departament,
    e.ci_employee,
    e.name_employee,
    e.lastName_employee,
    DATE_FORMAT(e.startDate_employee, '%d/%m/%Y') AS startDate_employee,
    e.phoneNumber_employee,
    e.address_employee,
    e.email_employee,
    e.salary_employee
 FROM tb_employee e 
INNER JOIN tb_codetype ct ON e.id_codeType = ct.id_codeType
INNER JOIN tb_typecontract tc ON e.id_typeContract = tc.id_typeContract
INNER JOIN tb_departament d ON e.id_departament = d.id_departament
INNER JOIN tb_jobtitle jt ON e.id_jobTitle = jt.id_jobTitle;
  


CREATE VIEW vw_reportGeneral AS
SELECT 
e.id_employee,
e.ci_employee,
CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,  
DATE_FORMAT(e.startDate_employee, '%d/%m/%Y') AS startDate_employee,
d.id_departament,
d.name_departament,
DATE_FORMAT(vp.startDate_vacationPeriod, '%d/%m/%Y') AS startDate_vacationPeriod,
DATE_FORMAT(vp.endDate_vacationPeriod, '%d/%m/%Y') AS endDate_vacationPeriod,
vp.balanceWorkingDays_vacationPeriod,
vp.balanceWeekendDays_vacationPeriod,
vp.balanceDays_vacationPeriod
FROM tb_employee e INNER JOIN tb_vacationperiod vp
ON e.id_employee = vp.id_employee INNER JOIN tb_departament d 
ON d.id_departament = e.id_departament
WHERE vp.state_vacationPeriod = 1;


CREATE VIEW vw_reportPermiss AS
SELECT 
    p.id_permission,
    e.ci_employee,
    CONCAT(e.name_employee, ' ', e.lastName_employee) AS fullname,
    DATE_FORMAT(p.issueDate_permission, '%d/%m/%Y') AS issueDate_permission,
    CASE 
        WHEN p.state_permission = 'V' THEN 'Validado'
        WHEN p.state_permission = 'P' THEN 'Pendiente'
        WHEN p.state_permission = 'R' THEN 'Rechazado'
        ELSE p.state_permission
    END AS state_permission,
    IF(TIME(p.startDateTime_permission) = '00:00:00', DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.startDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS startDateTime_permission,
    IF(TIME(p.endDateTime_permission) = '00:00:00', DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y'), DATE_FORMAT(p.endDateTime_permission, '%d/%m/%Y %H:%i:%s')) AS endDateTime_permission,
    p.workingDays_permission,
    p.weekendDays_permission,
   p.workingDays_permission + p.weekendDays_permission AS total
FROM tb_permission p
INNER JOIN tb_employee e ON p.id_employee = e.id_employee
INNER JOIN tb_departament d ON d.id_departament = e.id_departament
ORDER BY p.startDateTime_permission ASC;


/**********************************************************************************************
 ***                                                                                         **
 ***                                      DATOS INICIALES                                    **
 ***                                                                                         **
 *********************************************************************************************/


-- ---------------------------TIPOS DE USUARIO-------------------------------------------------
INSERT INTO tb_userType (name_userType) VALUES ('Aministrador');
INSERT INTO tb_userType (name_userType) VALUES ('Empleado');

-- ---------------------------TIPOS DE CODIGO-------------------------------------------------
INSERT INTO tb_codetype (name_codeType) VALUES('LOSEP');
INSERT INTO tb_codetype (name_codeType) VALUES('Código de Trabajo');

-- ---------------------------TIPOS DE CONTRATO------------------------------------------------
INSERT INTO tb_typecontract (name_typeContract) VALUES('Nombramiento');
INSERT INTO tb_typecontract (name_typeContract) VALUES('Nombramiento Libre Remoción');
INSERT INTO tb_typecontract (name_typeContract) VALUES('Nombramiento Provisional');
INSERT INTO tb_typecontract (name_typeContract) VALUES('Indefinido');
INSERT INTO tb_typecontract (name_typeContract) VALUES('Servicios Ocasionales');


-- ---------------------------CONTADOR DE PERIODO---------------------------------------------
INSERT INTO tb_numberPeriod (year_numberPeriod, count_numberPeriod, state_numberPeriod) VALUES (YEAR(CURRENT_DATE()), 0, 1);

-- ---------------------------RAZONES----------------------------------------------------
INSERT INTO tb_reason (name_reason) VALUES ('Comparecencia para versión en trámite judicial');
INSERT INTO tb_reason (name_reason) VALUES ('Cita Médica y/o Enfermedad');
INSERT INTO tb_reason (name_reason) VALUES ('Calamidad Doméstica');
INSERT INTO tb_reason (name_reason) VALUES ('PERMISO con cargo a vacaciones');
INSERT INTO tb_reason (name_reason) VALUES ('Estudio de Posgrado');
INSERT INTO tb_reason (name_reason) VALUES ('Matrícula Escolar');
INSERT INTO tb_reason (name_reason) VALUES ('Tiempo Compensatorio-CT');
INSERT INTO tb_reason (name_reason) VALUES ('Licencia por Matrimonio');
INSERT INTO tb_reason (name_reason) VALUES ('Licencia por Maternidad y/o Paternidad');
INSERT INTO tb_reason (name_reason) VALUES ('Elecciones 2021');
INSERT INTO tb_reason (name_reason) VALUES ('Reunión del Sindicato de Trabajadores');
INSERT INTO tb_reason (name_reason) VALUES ('Cuidado del Menor');

-- -----------------------------DEPARTAMENTOS--------------------------------------------------
INSERT INTO tb_departament (name_departament) VALUES ('Producción y Servicios Especializados');
INSERT INTO tb_departament (name_departament) VALUES ('Ganadería y Pastos');
INSERT INTO tb_departament (name_departament) VALUES ('Administración Técnica');
INSERT INTO tb_departament (name_departament) VALUES ('Suelos y Aguas');
INSERT INTO tb_departament (name_departament) VALUES ('Cacao y Café');
INSERT INTO tb_departament (name_departament) VALUES ('Producción y Servicios');
INSERT INTO tb_departament (name_departament) VALUES ('Protección Vegetal');
INSERT INTO tb_departament (name_departament) VALUES ('Banano, Plátano y Otras Musáceas');
INSERT INTO tb_departament (name_departament) VALUES ('Recursos Fitogenéticos');
INSERT INTO tb_departament (name_departament) VALUES ('Maíz');
INSERT INTO tb_departament (name_departament) VALUES ('Biotecnología');
INSERT INTO tb_departament (name_departament) VALUES ('Bodega');
INSERT INTO tb_departament (name_departament) VALUES ('Informática');
INSERT INTO tb_departament (name_departament) VALUES ('Administración Financiera');
INSERT INTO tb_departament (name_departament) VALUES ('Núcleo de Transferencia de Tecnología Y Capacitación');
INSERT INTO tb_departament (name_departament) VALUES ('Talento Humano');
INSERT INTO tb_departament (name_departament) VALUES ('Dirección De Estación');
INSERT INTO tb_departament (name_departament) VALUES ('Transferencia de Tecnología');
INSERT INTO tb_departament (name_departament) VALUES ('Subdirección de Posicionamiento Estratégico');
INSERT INTO tb_departament (name_departament) VALUES ('Planificación y Gestión Estratégica');
INSERT INTO tb_departament (name_departament) VALUES ('Proyecto DAPME');


-- -----------------------------CARGOS--------------------------------------------------
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Trabajador Agrícola');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Chofer');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Jardinero');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Conserje');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Asistente Administrativo');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Electricista');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Auxiliar De Electricista');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Auxiliar De Bodega');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Mecánico');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Auxiliar de Servicios');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Técnico de Servicios Especializados de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Asistente de tecnologías de la Información y Comunicación 1 de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Guardalmacen, Delegada');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Investigador Agropecuario');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Área');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Administrador 1 de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Investigador Auxiliar 1');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Transferencista Agropecuario');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Entomóloga, Delegada');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Presupuesto');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Tesorera, Delegada');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Analista de Adaptación y Eficiencia de Tecnología de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Director de Estación');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Asistente de Investigación');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Secretaría Ejecutiva');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Oficinista de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Asistente Contable');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Analista de Servicios Especializados de Estación Experimental');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Técnico de Producción');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Mecánica');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Subdirectora de Posicionamiento Estratégico');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Investigador Agregado 1');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Nómina');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Aspirante a Investigador 2');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Aspirante a Investigador 4');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Comunicación Social');
INSERT INTO tb_jobTitle (name_jobTitle) VALUES ('Responsable de Seguimiento y Evaluación del Proyecto');


-- -------------------------- DATOS EMPLEADOS / USUARIOS -------------------------------------
-- EMPLEADOS
INSERT INTO `tb_employee` (`id_employee`, `id_codeType`, `id_typeContract`, `id_departament`, `id_jobTitle`, `ci_employee`, `name_employee`, `lastName_employee`, `startDate_employee`, `phoneNumber_employee`, `address_employee`, `email_employee`, `salary_employee`) VALUES
	(1, 1, 1, 5, 17, '1201169669', 'Teresa De Jesus', 'Casanova Mendoza', '1980-02-01', '0', 's/n', 's/n', 1676.00),
	(2, 1, 1, 9, 24, '0907932388', 'Milton Moises', 'Teran Muñoz', '1984-02-01', '0', 's/n', 's/n', 817.00),
	(3, 1, 1, 11, 15, '1705671400', 'Arturo Ivan', 'Garzon Catota', '1987-07-07', '0', 's/n', 's/n', 1760.00),
	(4, 1, 1, 14, 27, '1201754650', 'Sonia Catalina', 'Rivera Castellano', '1988-10-01', '0', 's/n', 's/n', 986.00),
	(5, 2, 4, 3, 9, '1202105928', 'Klever Nelson', 'Sanchez Bravo', '1990-09-10', '0', 's/n', 's/n', 590.00),
	(6, 1, 1, 1, 29, '0602099459', 'Juan Neptali', 'Rosero Balseca', '1992-04-01', '0', 's/n', 's/n', 817.00),
	(7, 1, 1, 15, 18, '1202831754', 'Franklin Ramon', 'Cedeño Barreiro', '1992-04-23', '0', 's/n', 's/n', 817.00),
	(8, 1, 1, 4, 15, '0102294378', 'Manuel Danilo', 'Carrillo Zenteno', '1993-03-19', '0', 's/n', 's/n', 2308.00),
	(9, 1, 1, 1, 29, '1304879560', 'John Lider', 'Vera Alcivar', '1996-08-07', '0', 's/n', 's/n', 1212.00),
	(10, 1, 1, 4, 14, '1202611263', 'Betty Janet', 'Rivadeneira Moreira', '1997-04-01', '0', 's/n', 's/n', 986.00),
	(11, 1, 1, 1, 5, '1203742778', 'Jinjer Jessica', 'Coello Perez', '1997-04-01', '0', 's/n', 's/n', 733.00),
	(12, 1, 1, 15, 18, '0701903536', 'Miranda Consuelo', 'Diaz Diaz', '1998-11-01', '0', 's/n', 's/n', 1212.00),
	(13, 1, 1, 5, 15, '1306984079', 'Rey Gaston', 'Loor Solorzano', '1999-07-01', '0', 's/n', 's/n', 2308.00),
	(14, 1, 1, 7, 15, '1204678971', 'Sofia Lorena', 'Peñaherrera Villafuerte', '1999-08-01', '0', 's/n', 's/n', 817.00),
	(15, 1, 1, 19, 31, '1203471063', 'Zoila Karina', 'Solis Hidalgo', '2000-01-01', '0', 's/n', 's/n', 3247.00),
	(16, 1, 1, 7, 32, '0915146682', 'Danilo Isaac', 'Vera Coello', '2000-02-01', '0', 's/n', 's/n', 2034.00),
	(17, 1, 1, 1, 14, '1307203669', 'Jean Paul', 'Villavicencio Linzan', '2000-02-01', '0', 's/n', 's/n', 1212.00),
	(18, 1, 1, 4, 11, '1203430887', 'Maira Alexandra', 'Macias Bustamante', '2001-01-01', '0', 's/n', 's/n', 675.00),
	(19, 1, 1, 17, 23, '1307209526', 'Carlos Alberto', 'Molina Hidrovo', '2001-01-01', '0', 's/n', 's/n', 2368.00),
	(20, 1, 1, 1, 15, '0910656552', 'Galo Efrain', 'Lara Hidalgo', '2001-03-01', '0', 's/n', 's/n', 1084.00),
	(21, 1, 1, 10, 15, '1802659928', 'Marlon Brainer', 'Caicedo Villafuerte', '2001-05-01', '0', 's/n', 's/n', 1676.00),
	(22, 1, 1, 4, 17, '0915115562', 'Wuellins Dennis', 'Durango Cabanilla', '2001-11-01', '0', 's/n', 's/n', 1676.00),
	(23, 1, 1, 20, 15, '1203984008', 'Ruth Marjorie', 'Tenesaca Mera', '2002-04-01', '0', 's/n', 's/n', 901.00),
	(24, 1, 1, 16, 33, '1204112229', 'Veronica Carlina', 'Zambrano Saltos', '2002-04-01', '0', 's/n', 's/n', 675.00),
	(25, 1, 1, 4, 17, '1203915200', 'Braulio Jose', 'Lahuathe Mendoza', '2002-06-03', '0', 's/n', 's/n', 1676.00),
	(26, 1, 1, 5, 14, '0201204252', 'Juan Carlos', 'Jimenez Barragan', '2002-07-01', '0', 's/n', 's/n', 1212.00),
	(27, 1, 1, 3, 30, '1203892490', 'Luis Omar', 'Sanchez Carranza', '2004-07-01', '0', 's/n', 's/n', 585.00),
	(28, 1, 1, 14, 15, '1204509465', 'Shirley Maribel', 'Muñoz Ronquillo', '2004-07-01', '0', 's/n', 's/n', 733.00),
	(29, 1, 1, 14, 20, '1203850852', 'Deisy Francisca', 'Fernandez Gomez', '2006-02-01', '0', 's/n', 's/n', 901.00),
	(30, 2, 4, 3, 3, '1307064574', 'Victor Manuel', 'Aviles Rodriguez', '2007-09-01', '0', 's/n', 's/n', 500.00),
	(31, 2, 4, 2, 1, '0916529258', 'Henry Washington', 'Castro Peñafiel', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(32, 2, 4, 1, 1, '0916940331', 'Leonel Lizardo', 'Lorenti Lopez', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(33, 2, 4, 2, 1, '0917519860', 'Justo Agapo', 'Mayorga Tomala', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(34, 2, 4, 8, 1, '0920527603', 'Edison Eliseo', 'Moran Flores', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(35, 2, 4, 2, 1, '0922700331', 'Mauricio Jose', 'Alvarado Aguirre', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(36, 2, 4, 5, 1, '1201509518', 'Jose Steban', 'Bustamante Suarez', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(37, 2, 4, 5, 1, '1202007066', 'Alberto Emilio', 'Aspiazu Bustamante', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(38, 2, 4, 3, 1, '1202089957', 'Jorge Antonio', 'Moreira Cadena', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(39, 2, 4, 3, 1, '1202617617', 'Oscar Ruben', 'Vargas Moncayo', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(40, 2, 4, 7, 1, '1202622229', 'Jorge Calixto', 'Moran Flores', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(41, 2, 4, 1, 1, '1202849236', 'Amado Eulogio', 'Lopez Vera', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(42, 2, 4, 4, 1, '1202877393', 'Victor Franklin', 'Sanchez Campuzano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(43, 2, 4, 3, 1, '1202969091', 'Angel Mauricio', 'Vascones Torres', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(44, 2, 4, 3, 6, '1203238421', 'Angel Fidel', 'Mendoza Figueroa', '2009-01-01', '0', 's/n', 's/n', 555.00),
	(45, 2, 4, 1, 1, '1203421985', 'Freddy Eustaquio', 'Lopez Arevalo', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(46, 2, 4, 1, 1, '1203565138', 'Gustavo Francisco', 'Cisneros Vargas', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(47, 2, 4, 4, 1, '1203891419', 'Rolando Alfredo', 'Garcia Franco', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(48, 2, 4, 8, 1, '1203959463', 'Wilter Fabricio', 'Intriago Romero', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(49, 2, 4, 1, 1, '1204104085', 'Edinson Esteban', 'Vera Villamar', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(50, 2, 4, 1, 1, '1204120719', 'Juan Carlos', 'Mayancha Arellano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(51, 2, 4, 4, 5, '1204173874', 'Celso Miguel', 'Cevallos Parraga', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(52, 2, 4, 4, 1, '1204192528', 'Lorenzo Carlos', 'Sanchez Tubay', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(53, 2, 4, 3, 2, '1204538639', 'Andres Enrique', 'Montiel Maquilon', '2009-01-01', '0', 's/n', 's/n', 590.00),
	(54, 2, 4, 5, 1, '1204620981', 'Kleber Arquimides', 'Parraga Moran', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(55, 2, 4, 3, 1, '1204812687', 'Carlos Arturo', 'Figueroa Zambrano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(56, 2, 4, 1, 1, '1204816118', 'Kleber Xavier', 'Vera Zambrano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(57, 2, 4, 3, 1, '1204945560', 'Fabricio Fernando', 'Barcia Zambrano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(58, 2, 4, 1, 1, '1204977019', 'Jorge Luis', 'Moreira Quimis', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(59, 2, 4, 3, 1, '1205599861', 'Rene Javier', 'Flores Campuzano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(60, 2, 4, 9, 1, '1205639683', 'Victor Orlando', 'Tejada Silva', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(61, 2, 4, 3, 1, '1205659566', 'Pedro Lorenzo', 'Montoya Muñoz', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(62, 2, 4, 11, 1, '1205785171', 'Byron Ivan', 'Flores Campuzano', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(63, 2, 4, 9, 1, '1205972001', 'Leonardo Leonel', 'Catagua Briones', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(64, 2, 4, 3, 1, '1206245563', 'Juan Ramon', 'Tubay Sanchez', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(65, 2, 4, 1, 1, '1206247775', 'Mario Mauricio', 'Mayancha Maquilon', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(66, 2, 4, 12, 8, '1206354233', 'Sixto David', 'Parraga Matamba', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(67, 2, 4, 3, 4, '1308579679', 'Klever Hegberto', 'Farfan Vera', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(68, 2, 4, 7, 1, '1311149742', 'Julio Cesar', 'Sanchez Tubay', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(69, 2, 4, 5, 1, '1311243800', 'Oscar Alfredo', 'Parraga Moran', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(70, 2, 4, 1, 1, '1707607956', 'Modesto Edilberto', 'Ochoa Mora', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(71, 2, 4, 5, 1, '1711641645', 'Wellington Freddy', 'Sanchez Vilela', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(72, 2, 4, 1, 1, '1711641678', 'España Maria', 'Franco Flores', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(73, 2, 4, 1, 1, '1712150695', 'Maximiliano Jenrry', 'Arevalo Franco', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(74, 2, 4, 4, 1, '1715355200', 'Walter Rafael', 'Sanchez Franco', '2009-01-01', '0', 's/n', 's/n', 450.00),
	(75, 1, 1, 5, 17, '1204862336', 'Ignacio Antonio', 'Sotomayor Cantos', '2009-02-01', '0', 's/n', 's/n', 1676.00),
	(76, 1, 1, 17, 25, '1717333155', 'Elizabeth Herlinda', 'Perez Quinto', '2009-07-01', '0', 's/n', 's/n', 622.00),
	(77, 2, 4, 3, 2, '1204661696', 'Carlos Fabricio', 'Muñoz Mauyin', '2009-11-01', '0', 's/n', 's/n', 590.00),
	(78, 2, 4, 2, 1, '0929786473', 'Luis Vicente', 'Vera Castro', '2010-01-01', '0', 's/n', 's/n', 450.00),
	(79, 2, 4, 10, 1, '1204672727', 'Luis Gilberto', 'Espinoza Intriago', '2010-01-01', '0', 's/n', 's/n', 450.00),
	(80, 2, 4, 6, 1, '1204877045', 'Sergio Alberto', 'Bustamante Zamora', '2010-01-01', '0', 's/n', 's/n', 450.00),
	(81, 2, 4, 4, 1, '1712399730', 'Simon Eduardo', 'Arguello Alvarado', '2010-01-01', '0', 's/n', 's/n', 450.00),
	(82, 2, 4, 11, 1, '1205232737', 'Silvia Marianela', 'Delgado Suarez', '2010-06-01', '0', 's/n', 's/n', 450.00),
	(83, 1, 1, 8, 14, '1205594110', 'Antonio Javier', 'Bustamante Gonzalez', '2010-06-01', '0', 's/n', 's/n', 901.00),
	(84, 2, 4, 5, 1, '1205663659', 'Mario Marcelo', 'Zurita Veloz', '2010-06-01', '0', 's/n', 's/n', 450.00),
	(85, 2, 4, 11, 1, '1205731118', 'Joseline Teresa', 'Gavilanes Arreaga', '2010-08-02', '0', 's/n', 's/n', 450.00),
	(86, 2, 4, 11, 1, '0922835202', 'Walter Javier', 'Sanchez Campuzano', '2010-09-01', '0', 's/n', 's/n', 450.00),
	(87, 2, 4, 1, 1, '1202108443', 'Cristino Fernando', 'Almeida Chiriguaya', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(88, 2, 4, 2, 1, '1204621559', 'Pedro Daniel', 'Cedeño Gonzalez', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(89, 2, 4, 10, 1, '1205359951', 'Jose Luis', 'Sacon Cedeño', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(90, 2, 4, 1, 1, '1205539123', 'Javier Florentino', 'Mendez Vilela', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(91, 2, 4, 1, 1, '1205978891', 'Pedro Honorato', 'Flores Lopez', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(92, 2, 4, 1, 1, '1206248237', 'Carlos Alfredo', 'Almeida Garcia', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(93, 2, 4, 2, 1, '1206304907', 'Oscar Omar', 'Sanchez Tejada', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(94, 2, 4, 3, 4, '1707792576', 'Alejandro Roberto', 'Flores Lima', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(95, 2, 4, 4, 1, '1710813948', 'Francisco Ali', 'Franco Flores', '2011-01-03', '0', 's/n', 's/n', 450.00),
	(96, 1, 5, 8, 14, '1750150706', 'Aracelly', 'Lopez Diana', '2011-04-01', '0', 's/n', 's/n', 901.00),
	(97, 2, 4, 7, 1, '1205006990', 'Jaime Vicente', 'Carranza Sanchez', '2011-05-01', '0', 's/n', 's/n', 450.00),
	(98, 2, 4, 1, 1, '1204753642', 'Milton Felix', 'Arguello Alvarado', '2012-01-01', '0', 's/n', 's/n', 450.00),
	(99, 2, 4, 8, 1, '1204526469', 'Milton Freddy', 'Carranza Sanchez', '2012-02-01', '0', 's/n', 's/n', 450.00),
	(100, 2, 4, 10, 1, '1204398737', 'Maximo Bienvenido', 'Cedeño Burgos', '2012-05-02', '0', 's/n', 's/n', 450.00),
	(101, 2, 4, 3, 4, '1205692302', 'Jose Luis', 'Bravo Figueroa', '2012-08-01', '0', 's/n', 's/n', 450.00),
	(102, 2, 4, 2, 1, '1204743908', 'Medardo Alejandro', 'Zambrano Vilela', '2013-05-02', '0', 's/n', 's/n', 450.00),
	(103, 2, 4, 5, 1, '1204357840', 'Jaime Nolberto', 'Parraga Zamora', '2014-04-01', '0', 's/n', 's/n', 450.00),
	(104, 1, 5, 5, 28, '1205173618', 'Gladys Angelica', 'Rodriguez Zamora', '2014-04-01', '0', 's/n', 's/n', 901.00),
	(105, 2, 4, 1, 1, '1203903958', 'Oscar Rolando', 'Posligua Solis', '2014-04-23', '0', 's/n', 's/n', 450.00),
	(106, 2, 4, 1, 1, '1204465643', 'Camilo Ramon', 'Mayancha Ortega', '2014-04-23', '0', 's/n', 's/n', 450.00),
	(107, 1, 5, 16, 15, '1204454464', 'Carlos Julio', 'Macias Loor', '2014-06-01', '0', 's/n', 's/n', 1676.00),
	(108, 1, 5, 17, 26, '1205068982', 'Johanna Annabell', 'Proaño Tovar', '2014-06-01', '0', 's/n', 's/n', 585.00),
	(109, 1, 5, 4, 11, '1205281767', 'Katiusca Rosalinda', 'Bermudez Sotomayor', '2014-06-01', '0', 's/n', 's/n', 585.00),
	(110, 1, 5, 4, 11, '1206508689', 'Virginia Nabel', 'Moreira Zambrano', '2014-06-01', '0', 's/n', 's/n', 585.00),
	(111, 2, 4, 3, 7, '1206245480', 'Marco Antonio', 'Moreira Nivela', '2014-07-21', '0', 's/n', 's/n', 450.00),
	(112, 2, 4, 3, 2, '1202983357', 'Richard Manuel', 'Hidrovo Andrade', '2014-09-10', '0', 's/n', 's/n', 590.00),
	(113, 1, 5, 14, 21, '1206247072', 'Maria Alejandra', 'Llanos Salas', '2015-02-01', '0', 's/n', 's/n', 733.00),
	(114, 2, 4, 4, 1, '1206034280', 'Sergio Jose', 'Simi Benavides', '2015-02-13', '0', 's/n', 's/n', 450.00),
	(115, 1, 5, 18, 15, '0920206323', 'Jim Raphael', 'Ochoa Ramos', '2015-05-01', '0', 's/n', 's/n', 1086.00),
	(116, 2, 4, 3, 4, '1306285543', 'Darwin Rusdael', 'Lopez Bermello', '2015-06-22', '0', 's/n', 's/n', 450.00),
	(117, 2, 4, 3, 1, '1310361033', 'Carlos Kleber', 'Rengifo Castro', '2015-07-09', '0', 's/n', 's/n', 450.00),
	(118, 1, 3, 9, 15, '1205065004', 'Raul Valentin', 'Mora Yela', '2015-09-01', '0', 's/n', 's/n', 986.00),
	(119, 1, 5, 4, 24, '1105115990', 'Karina Elizabeth', 'Peña Salazar', '2017-10-01', '0', 's/n', 's/n', 817.00),
	(120, 1, 3, 2, 11, '0929292035', 'Denisse Lizbeth', 'Arana Sanchez', '2019-05-01', '0', 's/n', 's/n', 585.00),
	(121, 1, 5, 13, 12, '1204526972', 'Mariela Azucena', 'Barahona Yude', '2019-05-01', '0', 's/n', 's/n', 817.00),
	(122, 1, 3, 4, 22, '1309790242', 'Nancy Edith', 'Loor Verduga', '2019-05-01', '0', 's/n', 's/n', 901.00),
	(123, 2, 4, 1, 10, '1206385823', 'Solanyi Marley', 'Tigselema Zambrano', '2020-03-01', '0', 's/n', 's/n', 555.00),
	(124, 1, 5, 14, 13, '1205171018', 'Geovanna Gissela', 'Bone Castillo', '2021-04-01', '0', 's/n', 's/n', 817.00),
	(125, 1, 5, 3, 26, '1718143421', 'Eliana Rocio', 'Velasquez Lucas', '2021-11-01', '0', 's/n', 's/n', 585.00),
	(126, 1, 5, 21, 17, '0201854486', 'Edwin Jose', 'Borja Borja', '2022-02-01', '0', 's/n', 's/n', 1676.00),
	(127, 1, 5, 21, 36, '0502292733', 'Carlos Jose', 'Erazo Checa', '2022-02-01', '0', 's/n', 's/n', 1212.00),
	(128, 1, 4, 21, 34, '1205934563', 'Christopher Wilson', 'Suarez Palacios', '2022-02-01', '0', 's/n', 's/n', 986.00),
	(129, 1, 4, 21, 35, '1308954856', 'Jacinto Ramon', 'Mendoza Parraga', '2022-02-01', '0', 's/n', 's/n', 1212.00),
	(130, 1, 5, 11, 24, '1804086344', 'Fabian Andres', 'Reyes Salinas', '2022-02-01', '0', 's/n', 's/n', 733.00),
	(131, 1, 3, 7, 19, '1204504045', 'Marjorie Dolores', 'Espinoza Roca', '2022-03-01', '0', 's/n', 's/n', 1086.00),
	(132, 1, 5, 21, 35, '1311156275', 'Karen Rafaela', 'Mayorga Morejon', '2022-03-01', '0', 's/n', 's/n', 1212.00),
	(133, 1, 5, 21, 17, '1718347733', 'Myrian Elizabeth', 'Herrera Centeno', '2022-03-01', '0', 's/n', 's/n', 1676.00),
	(134, 1, 4, 21, 17, '1206699645', 'Ernesto Ricardo', 'Paredes Puga', '2022-04-01', '0', 's/n', 's/n', 1676.00),
	(135, 1, 5, 21, 34, '0202342853', 'Liseth Mariela', 'Carvajal Guerrero', '2022-09-01', '0', 's/n', 's/n', 986.00),
	(136, 1, 4, 21, 34, '0940323157', 'Byron Geovanny', 'Marin Arevalo', '2022-09-01', '0', 's/n', 's/n', 986.00),
	(137, 1, 5, 21, 17, '1725033821', 'Pedro Isaias', 'Terrero Yepez', '2022-09-01', '0', 's/n', 's/n', 1676.00),
	(138, 1, 5, 21, 17, '3050411770', 'Paola Manoella Andrea', 'Rodulfo Acuña', '2022-09-01', '0', 's/n', 's/n', 1676.00),
	(139, 1, 4, 21, 34, '0703323816', 'Maria Mercedes', 'Beltran Salinas', '2022-10-01', '0', 's/n', 's/n', 986.00),
	(140, 1, 5, 21, 26, '0927883892', 'Alexandra Mariuxi', 'Jimenez Barzola', '2023-02-01', '0', 's/n', 's/n', 585.00),
	(141, 1, 5, 21, 37, '1205948332', 'Yasmina Maricela', 'Lino Ganchozo', '2023-02-01', '0', 's/n', 's/n', 1212.00),
	(142, 1, 4, 21, 26, '2000047775', 'Jenny Geovanna', 'Rodriguez Gomez', '2023-02-01', '0', 's/n', 's/n', 585.00),
	(143, 1, 3, 3, 16, '1203129604', 'Leandro Leonardo', 'Cansing Arichabala', '2023-03-01', '0', 's/n', 's/n', 1412.00),
	(144, 2, 4, 3, 2, '1206439828', 'Ricardo Manuel', 'Arevalo Fernandez', '2023-03-01', '0', 's/n', 's/n', 570.00),
	(145, 1, 5, 21, 34, '1207248079', 'Yordy Ariel', 'Arcos Palma', '2023-03-01', '0', 's/n', 's/n', 986.00),
	(146, 1, 5, 21, 35, '1204129728', 'Ruben Dario', 'Vacacela Guerrero', '2023-04-01', '0', 's/n', 's/n', 1212.00),
	(147, 1, 4, 21, 17, '1307037448', 'Maria Virginia', 'Mendoza Garcia', '2023-04-01', '0', 's/n', 's/n', 1676.00),
	(148, 1, 3, 14, 26, '1723863732', 'Vanessa Elizabeth', 'Uchuari Prado', '2023-04-01', '0', 's/n', 's/n', 585.00),
	(149, 1, 5, 21, 35, '0802107276', 'Octavio Roberto', 'Carrasco Dueñas', '2023-05-01', '0', 's/n', 's/n', 1212.00),
	(150, 2, 5, 1, 1, '1205794371', 'Humberto Manuel', 'Molina Triviño', '2023-05-01', '0', 's/n', 's/n', 450.00),
	(151, 1, 5, 21, 34, '1206514711', 'Willian Gerardo', 'Camacho Peralta', '2023-05-01', '0', 's/n', 's/n', 986.00),
	(152, 1, 5, 21, 34, '1207243096', 'Joffre Stalin', 'Teran Macias', '2023-05-01', '0', 's/n', 's/n', 986.00),
	(153, 1, 5, 2, 15, '1307792513', 'Limberg Ivan', 'Zambrano Pinargote', '2023-05-01', '0', 's/n', 's/n', 1212.00);


-- USUARIOS
INSERT INTO `tb_user` (`id_user`, `id_userType`, `id_employee`, `name_user`, `password_user`, `state_user`, `createdDate_user`, `lastSession_user`) VALUES
	(1, 2, 1, 'teresa.casanova', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(2, 2, 2, 'milton.teran', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(3, 2, 3, 'arturo.garzon', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(4, 2, 4, 'sonia.rivera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(5, 2, 5, 'klever.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(6, 2, 6, 'juan.rosero', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(7, 2, 7, 'franklin.cedeño', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(8, 2, 8, 'manuel.carrillo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(9, 2, 9, 'john.vera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(10, 2, 10, 'betty.rivadeneira', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(11, 2, 11, 'jinjer.coello', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(12, 2, 12, 'miranda.diaz', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(13, 2, 13, 'rey.loor', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(14, 2, 14, 'sofia.peñaherrera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(15, 2, 15, 'zoila.solis', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(16, 2, 16, 'danilo.vera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(17, 2, 17, 'jean.villavicencio', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(18, 2, 18, 'maira.macias', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(19, 2, 19, 'carlos.molina', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(20, 2, 20, 'galo.lara', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(21, 2, 21, 'marlon.caicedo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(22, 2, 22, 'wuellins.durango', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(23, 2, 23, 'ruth.tenesaca', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(24, 2, 24, 'veronica.zambrano', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(25, 2, 25, 'braulio.lahuathe', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(26, 2, 26, 'juan.jimenez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(27, 2, 27, 'luis.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(28, 2, 28, 'shirley.muñoz', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(29, 2, 29, 'deisy.fernandez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(30, 2, 30, 'victor.aviles', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(31, 2, 31, 'henry.castro', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(32, 2, 32, 'leonel.lorenti', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(33, 2, 33, 'justo.mayorga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(34, 2, 34, 'edison.moran', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(35, 2, 35, 'mauricio.alvarado', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(36, 2, 36, 'jose.bustamante', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(37, 2, 37, 'alberto.aspiazu', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(38, 2, 38, 'jorge.moreira', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(39, 2, 39, 'oscar.vargas', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(40, 2, 40, 'jorge.moran', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(41, 2, 41, 'amado.lopez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(42, 2, 42, 'victor.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(43, 2, 43, 'angel.vascones', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(44, 2, 44, 'angel.mendoza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(45, 2, 45, 'freddy.lopez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(46, 2, 46, 'gustavo.cisneros', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(47, 2, 47, 'rolando.garcia', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(48, 2, 48, 'wilter.intriago', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(49, 2, 49, 'edinson.vera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(50, 2, 50, 'juan.mayancha', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(51, 2, 51, 'celso.cevallos', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(52, 2, 52, 'lorenzo.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(53, 2, 53, 'andres.montiel', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(54, 2, 54, 'kleber.parraga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(55, 2, 55, 'carlos.figueroa', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(56, 2, 56, 'kleber.vera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(57, 2, 57, 'fabricio.barcia', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(58, 2, 58, 'jorge.moreira1', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(59, 2, 59, 'rene.flores', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(60, 2, 60, 'victor.tejada', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(61, 2, 61, 'pedro.montoya', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(62, 2, 62, 'byron.flores', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(63, 2, 63, 'leonardo.catagua', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(64, 2, 64, 'juan.tubay', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(65, 2, 65, 'mario.mayancha', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(66, 2, 66, 'sixto.parraga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(67, 2, 67, 'klever.farfan', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(68, 2, 68, 'julio.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(69, 2, 69, 'oscar.parraga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(70, 2, 70, 'modesto.ochoa', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(71, 2, 71, 'wellington.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(72, 2, 72, 'españa.franco', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(73, 2, 73, 'maximiliano.arevalo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(74, 2, 74, 'walter.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(75, 2, 75, 'ignacio.sotomayor', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(76, 2, 76, 'elizabeth.perez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(77, 2, 77, 'carlos.muñoz', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(78, 2, 78, 'luis.vera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(79, 2, 79, 'luis.espinoza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(80, 2, 80, 'sergio.bustamante', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(81, 2, 81, 'simon.arguello', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(82, 2, 82, 'silvia.delgado', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(83, 2, 83, 'antonio.bustamante', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(84, 2, 84, 'mario.zurita', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(85, 2, 85, 'joseline.gavilanes', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(86, 2, 86, 'walter.sanchez1', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(87, 2, 87, 'cristino.almeida', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(88, 2, 88, 'pedro.cedeño', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(89, 2, 89, 'jose.sacon', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(90, 2, 90, 'javier.mendez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(91, 2, 91, 'pedro.flores', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(92, 2, 92, 'carlos.almeida', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(93, 2, 93, 'oscar.sanchez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(94, 2, 94, 'alejandro.flores', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(95, 2, 95, 'francisco.franco', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(96, 2, 96, 'aracelly.lopez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(97, 2, 97, 'jaime.carranza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(98, 2, 98, 'milton.arguello', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(99, 2, 99, 'milton.carranza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(100, 2, 100, 'maximo.cedeño', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(101, 2, 101, 'jose.bravo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(102, 2, 102, 'medardo.zambrano', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(103, 2, 103, 'jaime.parraga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(104, 2, 104, 'gladys.rodriguez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(105, 2, 105, 'oscar.posligua', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(106, 2, 106, 'camilo.mayancha', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(107, 2, 107, 'carlos.macias', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(108, 2, 108, 'johanna.proaño', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(109, 2, 109, 'katiusca.bermudez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(110, 2, 110, 'virginia.moreira', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(111, 2, 111, 'marco.moreira', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(112, 2, 112, 'richard.hidrovo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(113, 2, 113, 'maria.llanos', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(114, 2, 114, 'sergio.simi', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(115, 2, 115, 'jim.ochoa', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(116, 2, 116, 'darwin.lopez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(117, 2, 117, 'carlos.rengifo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(118, 2, 118, 'raul.mora', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(119, 2, 119, 'karina.peña', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(120, 2, 120, 'denisse.arana', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(121, 2, 121, 'mariela.barahona', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(122, 2, 122, 'nancy.loor', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(123, 2, 123, 'solanyi.tigselema', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(124, 2, 124, 'geovanna.bone', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(125, 2, 125, 'eliana.velasquez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(126, 2, 126, 'edwin.borja', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(127, 2, 127, 'carlos.erazo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(128, 2, 128, 'christopher.suarez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(129, 2, 129, 'jacinto.mendoza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(130, 2, 130, 'fabian.reyes', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(131, 2, 131, 'marjorie.espinoza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(132, 2, 132, 'karen.mayorga', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(133, 2, 133, 'myrian.herrera', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(134, 2, 134, 'ernesto.paredes', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(135, 2, 135, 'liseth.carvajal', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(136, 2, 136, 'byron.marin', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(137, 2, 137, 'pedro.terrero', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(138, 2, 138, 'paola.rodulfo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(139, 2, 139, 'maria.beltran', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(140, 2, 140, 'alexandra.jimenez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(141, 2, 141, 'yasmina.lino', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(142, 2, 142, 'jenny.rodriguez', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(143, 2, 143, 'leandro.cansing', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(144, 2, 144, 'ricardo.arevalo', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(145, 2, 145, 'yordy.arcos', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(146, 2, 146, 'ruben.vacacela', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(147, 2, 147, 'maria.mendoza', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(148, 2, 148, 'vanessa.uchuari', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(149, 2, 149, 'octavio.carrasco', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(150, 2, 150, 'humberto.molina', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(151, 2, 151, 'willian.camacho', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(152, 2, 152, 'joffre.teran', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
	(153, 2, 153, 'limberg.zambrano', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
        (154, 1, 107, 'carlos.macias1', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW()),
        (155, 1, 24, 'veronica.zambrano1', '$2y$10$9zRiLx.6vg8OXvWFePQKkeeWCkNApQpKKhZ2ct50jLOTPEwNYRfcS', 1, NOW(), NOW());







